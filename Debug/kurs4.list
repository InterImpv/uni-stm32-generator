
kurs4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003154  08003154  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800315c  0800315c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000088  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c111  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d41  00000000  00000000  0002c16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  0002ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020971  00000000  00000000  0002f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c338  00000000  00000000  0004fee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c97c9  00000000  00000000  0005c221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001259ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c8  00000000  00000000  00125a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003108 	.word	0x08003108

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003108 	.word	0x08003108

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <sys_delay>:

/*
 * sys_delay:	@resolution = 1 ms
 */
static void sys_delay(uint32_t ms)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint32_t delay = HAL_GetTick() + ms;
 80004c8:	f001 f9b2 	bl	8001830 <HAL_GetTick>
 80004cc:	4602      	mov	r2, r0
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
	while(HAL_GetTick() < delay);
 80004d4:	bf00      	nop
 80004d6:	f001 f9ab 	bl	8001830 <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4293      	cmp	r3, r2
 80004e0:	d8f9      	bhi.n	80004d6 <sys_delay+0x16>
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <lcd_strobe>:
//static const uint8_t __LCD_CGRAM = 5;

/* private lcd constants END */

static void lcd_strobe(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDEN_PIN_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <lcd_strobe+0x28>)
 80004f8:	f001 fd60 	bl	8001fbc <HAL_GPIO_WritePin>
    sys_delay(LCDT_1MS);
 80004fc:	2301      	movs	r3, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffde 	bl	80004c0 <sys_delay>
    HAL_GPIO_WritePin(GPIOE, LCDEN_PIN_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050a:	4802      	ldr	r0, [pc, #8]	; (8000514 <lcd_strobe+0x28>)
 800050c:	f001 fd56 	bl	8001fbc <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <lcd_set_high>:

/* send upper nible */
static void lcd_set_high(uint8_t data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, LCDD4_PIN_Pin, data & 0x10);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0310 	and.w	r3, r3, #16
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <lcd_set_high+0x64>)
 8000532:	f001 fd43 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD5_PIN_Pin, data & 0x20);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <lcd_set_high+0x64>)
 8000546:	f001 fd39 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD6_PIN_Pin, data & 0x40);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <lcd_set_high+0x64>)
 800055a:	f001 fd2f 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD7_PIN_Pin, data & 0x80);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <lcd_set_high+0x64>)
 800056e:	f001 fd25 	bl	8001fbc <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <lcd_set_low>:

/* send lower nibble */
static void lcd_set_low(uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, LCDD4_PIN_Pin, data & 0x01);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <lcd_set_low+0x64>)
 800059a:	f001 fd0f 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD5_PIN_Pin, data & 0x02);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <lcd_set_low+0x64>)
 80005ae:	f001 fd05 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD6_PIN_Pin, data & 0x04);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <lcd_set_low+0x64>)
 80005c2:	f001 fcfb 	bl	8001fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD7_PIN_Pin, data & 0x08);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <lcd_set_low+0x64>)
 80005d6:	f001 fcf1 	bl	8001fbc <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <lcd_command_mode>:

/* sending instruction: RS <= 1'b0 */
static void lcd_command_mode(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <lcd_command_mode+0x14>)
 80005f2:	f001 fce3 	bl	8001fbc <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <lcd_data_mode>:

/* sending data: RS <= 1'b1 */
static void lcd_data_mode(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <lcd_data_mode+0x14>)
 800060a:	f001 fcd7 	bl	8001fbc <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <lcd_config>:

static enum LCD_ERR lcd_config(uint8_t param)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if (param != LCD_CFG_4BIT_1LINE_5X8 ||
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b20      	cmp	r3, #32
 8000626:	d102      	bne.n	800062e <lcd_config+0x16>
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b28      	cmp	r3, #40	; 0x28
 800062c:	d001      	beq.n	8000632 <lcd_config+0x1a>
		param != LCD_CFG_4BIT_2LINE_5X8)
		return LCD_EARG;
 800062e:	2301      	movs	r3, #1
 8000630:	e01c      	b.n	800066c <lcd_config+0x54>

	/* RS <= 1'b0 */
	lcd_command_mode();
 8000632:	f7ff ffd9 	bl	80005e8 <lcd_command_mode>

	/* change 8-bit interface to 4-bit interface */
	lcd_set_high(param);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff6d 	bl	8000518 <lcd_set_high>
	lcd_strobe();
 800063e:	f7ff ff55 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 8000642:	230a      	movs	r3, #10
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff3b 	bl	80004c0 <sys_delay>

	/* DB7 to DB4 of the "function set" instruction is written twice */
	lcd_strobe();
 800064a:	f7ff ff4f 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 800064e:	230a      	movs	r3, #10
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff35 	bl	80004c0 <sys_delay>

	/* 4-bit, two lines, 5x8 pixel */
	lcd_set_low(param);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff91 	bl	8000580 <lcd_set_low>
	lcd_strobe();
 800065e:	f7ff ff45 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 8000662:	230a      	movs	r3, #10
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff2b 	bl	80004c0 <sys_delay>

	return LCD_EOK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <lcd_write>:

/* sends a given byte of data to lcd */
static void lcd_write(uint8_t data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]

	lcd_set_high(data);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff49 	bl	8000518 <lcd_set_high>
	lcd_strobe();
 8000686:	f7ff ff31 	bl	80004ec <lcd_strobe>
	lcd_set_low(data);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff77 	bl	8000580 <lcd_set_low>
	lcd_strobe();
 8000692:	f7ff ff2b 	bl	80004ec <lcd_strobe>

	sys_delay(LCDT_1MS);
 8000696:	2301      	movs	r3, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff11 	bl	80004c0 <sys_delay>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <lcd_set_mode>:

/* sets lcd display mode */
static enum LCD_ERR lcd_set_mode(const uint8_t mode)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
	if (mode != LCD_CFG_DEC_NOSHIFT ||
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d108      	bne.n	80006c8 <lcd_set_mode+0x22>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d105      	bne.n	80006c8 <lcd_set_mode+0x22>
		mode != LCD_CFG_DEC_SHIFT ||
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d102      	bne.n	80006c8 <lcd_set_mode+0x22>
		mode != LCD_CFG_INC_NOSHIFT ||
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d001      	beq.n	80006cc <lcd_set_mode+0x26>
		mode != LCD_CFG_INC_SHIFT)
		return LCD_EARG;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e01b      	b.n	8000704 <lcd_set_mode+0x5e>

	if (mode != LCD_CFG_DISPLAY1_BLINK1_CURSOR1 ||
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d10b      	bne.n	80006ea <lcd_set_mode+0x44>
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b0e      	cmp	r3, #14
 80006d6:	d108      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK0_CURSOR1 ||
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d105      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK1_CURSOR0 ||
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b0c      	cmp	r3, #12
 80006e2:	d102      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK0_CURSOR0 ||
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d001      	beq.n	80006ee <lcd_set_mode+0x48>
		mode != LCD_CFG_DISPLAY0_BLINK0_CURSOR0)
		return LCD_EARG;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00a      	b.n	8000704 <lcd_set_mode+0x5e>

	/* RS <= 1'b0 */
	lcd_command_mode();
 80006ee:	f7ff ff7b 	bl	80005e8 <lcd_command_mode>
	lcd_write(mode);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffbd 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 80006fa:	2301      	movs	r3, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fedf 	bl	80004c0 <sys_delay>

	return LCD_EOK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcd_cls>:

/* interface functions BEGIN */
void lcd_cls(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* RS <= 1'b0 */
	lcd_command_mode();
 8000710:	f7ff ff6a 	bl	80005e8 <lcd_command_mode>
	lcd_write(__LCD_CLS);
 8000714:	2301      	movs	r3, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffac 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 800071c:	2301      	movs	r3, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fece 	bl	80004c0 <sys_delay>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_ret>:

void lcd_ret(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/* RS <= 1'b0 */
	lcd_command_mode();
 800072c:	f7ff ff5c 	bl	80005e8 <lcd_command_mode>
	lcd_write(__LCD_RET);
 8000730:	2302      	movs	r3, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff9e 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 8000738:	2301      	movs	r3, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fec0 	bl	80004c0 <sys_delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <lcd_putch>:
	return LCD_EARG;
}

/* prints a given char at current cursor position */
void lcd_putch(const uint8_t byte)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	lcd_data_mode();
 800074e:	f7ff ff57 	bl	8000600 <lcd_data_mode>

	lcd_write(byte);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8d 	bl	8000674 <lcd_write>
	lcd_write(LCDT_1MS);
 800075a:	2301      	movs	r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff88 	bl	8000674 <lcd_write>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_goto>:

/* moves cursor to given X: @addr, Y: @line coordinates */
enum LCD_ERR lcd_goto(const uint8_t line, const uint8_t addr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    uint8_t xpos = addr & 0x0F;
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	73fb      	strb	r3, [r7, #15]

    /* RS <= 1'b0 */
    lcd_command_mode();
 8000784:	f7ff ff30 	bl	80005e8 <lcd_command_mode>

	switch (line)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d018      	beq.n	80007c0 <lcd_goto+0x54>
 800078e:	2b05      	cmp	r3, #5
 8000790:	dc1f      	bgt.n	80007d2 <lcd_goto+0x66>
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <lcd_goto+0x30>
 8000796:	2b01      	cmp	r3, #1
 8000798:	d009      	beq.n	80007ae <lcd_goto+0x42>
 800079a:	e01a      	b.n	80007d2 <lcd_goto+0x66>
	{
	/* set DDRAM address. */
	case 0:
		lcd_write(0x80 | 0x00 | xpos);
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff65 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e012      	b.n	80007d4 <lcd_goto+0x68>
		break;
	case 1:
		lcd_write(0x80 | 0x40 | xpos);
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff5c 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007bc:	2300      	movs	r3, #0
 80007be:	e009      	b.n	80007d4 <lcd_goto+0x68>
		break;
	/* set CGRAM address. */
	case 5:
		lcd_write(0x40 | xpos);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff53 	bl	8000674 <lcd_write>
		return LCD_ECGRAM;
 80007ce:	2302      	movs	r3, #2
 80007d0:	e000      	b.n	80007d4 <lcd_goto+0x68>
		break;

	default:
		return LCD_EARG;
 80007d2:	2301      	movs	r3, #1
		break;
	}
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <lcd_scroll>:
	lcd_putch(' ');
	lcd_shift_curs(__LCD_CURS_L);
}

enum LCD_ERR lcd_scroll(uint8_t direction)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	/* RS <= 1'b0 */
	lcd_command_mode();
 80007e6:	f7ff feff 	bl	80005e8 <lcd_command_mode>

	/* shift whole display */
	if (direction ==__LCD_CURS_L) {			// '<'
 80007ea:	223c      	movs	r2, #60	; 0x3c
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d105      	bne.n	80007fe <lcd_scroll+0x22>
		lcd_write(__LCD_DSL);
 80007f2:	2318      	movs	r3, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff3d 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e00a      	b.n	8000814 <lcd_scroll+0x38>
	} else if (direction ==__LCD_CURS_R) {	// '>'
 80007fe:	223e      	movs	r2, #62	; 0x3e
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4293      	cmp	r3, r2
 8000804:	d105      	bne.n	8000812 <lcd_scroll+0x36>
		lcd_write(__LCD_DSR);
 8000806:	231c      	movs	r3, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff33 	bl	8000674 <lcd_write>
		return LCD_EOK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <lcd_scroll+0x38>
	}
	return LCD_EARG;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <lcd_init>:

/* initializes lcd display */
enum LCD_ERR lcd_init(const uint8_t type, const uint8_t mode, const uint8_t shift)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	460b      	mov	r3, r1
 8000828:	71bb      	strb	r3, [r7, #6]
 800082a:	4613      	mov	r3, r2
 800082c:	717b      	strb	r3, [r7, #5]
	lcd_write(__LCD_FST);
 800082e:	2330      	movs	r3, #48	; 0x30
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff1f 	bl	8000674 <lcd_write>
	sys_delay(LCDT_10MS);
 8000836:	230a      	movs	r3, #10
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe41 	bl	80004c0 <sys_delay>
	lcd_write(__LCD_FST);
 800083e:	2330      	movs	r3, #48	; 0x30
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff17 	bl	8000674 <lcd_write>
	sys_delay(LCDT_10MS);
 8000846:	230a      	movs	r3, #10
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe39 	bl	80004c0 <sys_delay>

	lcd_config(type);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fee1 	bl	8000618 <lcd_config>

	lcd_set_mode(mode);
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff24 	bl	80006a6 <lcd_set_mode>

	lcd_set_mode(shift);
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff20 	bl	80006a6 <lcd_set_mode>

	lcd_cls();
 8000866:	f7ff ff51 	bl	800070c <lcd_cls>
	lcd_ret();
 800086a:	f7ff ff5d 	bl	8000728 <lcd_ret>

	/* this is required for some reason unknown */
	lcd_scroll('<');
 800086e:	203c      	movs	r0, #60	; 0x3c
 8000870:	f7ff ffb4 	bl	80007dc <lcd_scroll>

	return LCD_EOK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <clamp_ui32>:
/* USER CODE BEGIN 0 */

/* misc functions */

static uint32_t clamp_ui32(uint32_t val, uint32_t min, uint32_t max)
{
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	const uint32_t ret = (val < min) ? min : val;
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4293      	cmp	r3, r2
 8000890:	bf38      	it	cc
 8000892:	4613      	movcc	r3, r2
 8000894:	617b      	str	r3, [r7, #20]
	return (ret > max) ? max : ret;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4293      	cmp	r3, r2
 800089c:	bf28      	it	cs
 800089e:	4613      	movcs	r3, r2
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	371c      	adds	r7, #28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <__uint32_skip_zeroes>:

static char *__uint32_skip_zeroes(char *buf)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	char *msd = &buf[UINT32_DIGITS - 1];
 80008b4:	230a      	movs	r3, #10
 80008b6:	3b01      	subs	r3, #1
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]

	/* find the msd / skip leading zeroes */
	for (uint32_t i = 0; i < UINT32_DIGITS; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	e00d      	b.n	80008e0 <__uint32_skip_zeroes+0x34>
		if (buf[i] != '0') {
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b30      	cmp	r3, #48	; 0x30
 80008ce:	d004      	beq.n	80008da <__uint32_skip_zeroes+0x2e>
			msd = &buf[i];
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	4413      	add	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
			break;
 80008d8:	e006      	b.n	80008e8 <__uint32_skip_zeroes+0x3c>
	for (uint32_t i = 0; i < UINT32_DIGITS; i++)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	3301      	adds	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	220a      	movs	r2, #10
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d3ed      	bcc.n	80008c4 <__uint32_skip_zeroes+0x18>
		}

	return msd;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <uint32_to_str>:

static char *uint32_to_str(uint32_t val, char *buf)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	/* transform each uint32 digit into char */
	for(uint32_t i = UINT32_DIGITS; i > 0; i--, val /= STR2INT_BASE10)
 8000902:	230a      	movs	r3, #10
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e015      	b.n	8000934 <uint32_to_str+0x3c>
		buf[i - 1] = "0123456789"[val % STR2INT_BASE10];
 8000908:	220a      	movs	r2, #10
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000910:	fb02 f201 	mul.w	r2, r2, r1
 8000914:	1a9a      	subs	r2, r3, r2
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3b01      	subs	r3, #1
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	440b      	add	r3, r1
 800091e:	490a      	ldr	r1, [pc, #40]	; (8000948 <uint32_to_str+0x50>)
 8000920:	5c8a      	ldrb	r2, [r1, r2]
 8000922:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = UINT32_DIGITS; i > 0; i--, val /= STR2INT_BASE10)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3b01      	subs	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	220a      	movs	r2, #10
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e6      	bne.n	8000908 <uint32_to_str+0x10>

	return buf;
 800093a:	683b      	ldr	r3, [r7, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	08003120 	.word	0x08003120

0800094c <uint32_to_zstr>:

static char *uint32_to_zstr(uint32_t val, char *buf)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	/* transform a given value */
	buf = uint32_to_str(val, buf);
 8000956:	6839      	ldr	r1, [r7, #0]
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffcd 	bl	80008f8 <uint32_to_str>
 800095e:	6038      	str	r0, [r7, #0]

	/* find the msd / skip leading zeroes */
	return __uint32_skip_zeroes(buf);
 8000960:	6838      	ldr	r0, [r7, #0]
 8000962:	f7ff ffa3 	bl	80008ac <__uint32_skip_zeroes>
 8000966:	4603      	mov	r3, r0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <print_info>:

/* print */
static void print_info(void)
{
 8000970:	b598      	push	{r3, r4, r7, lr}
 8000972:	af00      	add	r7, sp, #0
	/* dislay info */
	term_cls(systerm);
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <print_info+0xac>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fc93 	bl	80012a4 <term_cls>

	/* generator parameters */
	term_putsxy(systerm, "Mul:", 0, 0);
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <print_info+0xac>)
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	2200      	movs	r2, #0
 8000986:	4926      	ldr	r1, [pc, #152]	; (8000a20 <print_info+0xb0>)
 8000988:	f000 fd8b 	bl	80014a2 <term_putsxy>
	term_putsxy(systerm, "Div:", 0, 1);
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <print_info+0xac>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2301      	movs	r3, #1
 8000992:	2200      	movs	r2, #0
 8000994:	4923      	ldr	r1, [pc, #140]	; (8000a24 <print_info+0xb4>)
 8000996:	f000 fd84 	bl	80014a2 <term_putsxy>
	term_putsxy(systerm, uint32_to_zstr(fine_step, str), 4, 0);
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <print_info+0xac>)
 800099c:	681c      	ldr	r4, [r3, #0]
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <print_info+0xb8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4922      	ldr	r1, [pc, #136]	; (8000a2c <print_info+0xbc>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffd1 	bl	800094c <uint32_to_zstr>
 80009aa:	4601      	mov	r1, r0
 80009ac:	2300      	movs	r3, #0
 80009ae:	2204      	movs	r2, #4
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 fd76 	bl	80014a2 <term_putsxy>
	term_putsxy(systerm, uint32_to_zstr(tick_step + 1, str), 4, 1);
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <print_info+0xac>)
 80009b8:	681c      	ldr	r4, [r3, #0]
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <print_info+0xc0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	491a      	ldr	r1, [pc, #104]	; (8000a2c <print_info+0xbc>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffc2 	bl	800094c <uint32_to_zstr>
 80009c8:	4601      	mov	r1, r0
 80009ca:	2301      	movs	r3, #1
 80009cc:	2204      	movs	r2, #4
 80009ce:	4620      	mov	r0, r4
 80009d0:	f000 fd67 	bl	80014a2 <term_putsxy>

	/* generator output */
	term_putsxy(systerm, "Freq:", 9, 0);
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <print_info+0xac>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	2300      	movs	r3, #0
 80009da:	2209      	movs	r2, #9
 80009dc:	4915      	ldr	r1, [pc, #84]	; (8000a34 <print_info+0xc4>)
 80009de:	f000 fd60 	bl	80014a2 <term_putsxy>
	term_putsxy(systerm, uint32_to_zstr(curr_freq, str), 9, 1);
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <print_info+0xac>)
 80009e4:	681c      	ldr	r4, [r3, #0]
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <print_info+0xc8>)
 80009e8:	edd3 7a00 	vldr	s15, [r3]
 80009ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f0:	490e      	ldr	r1, [pc, #56]	; (8000a2c <print_info+0xbc>)
 80009f2:	ee17 0a90 	vmov	r0, s15
 80009f6:	f7ff ffa9 	bl	800094c <uint32_to_zstr>
 80009fa:	4601      	mov	r1, r0
 80009fc:	2301      	movs	r3, #1
 80009fe:	2209      	movs	r2, #9
 8000a00:	4620      	mov	r0, r4
 8000a02:	f000 fd4e 	bl	80014a2 <term_putsxy>

	term_putchxy(systerm, main_step_mode, 15, 0);
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <print_info+0xac>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <print_info+0xcc>)
 8000a0c:	7819      	ldrb	r1, [r3, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	220f      	movs	r2, #15
 8000a12:	f000 fc9d 	bl	8001350 <term_putchxy>
}
 8000a16:	bf00      	nop
 8000a18:	bd98      	pop	{r3, r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	0800312c 	.word	0x0800312c
 8000a24:	08003134 	.word	0x08003134
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	20000048 	.word	0x20000048
 8000a34:	0800313c 	.word	0x0800313c
 8000a38:	2000000c 	.word	0x2000000c
 8000a3c:	20000008 	.word	0x20000008

08000a40 <mode_change>:

/* mode state machine */
static enum STEP_CONTROL mode_change(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	switch(main_step_mode)
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <mode_change+0x9c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	3b31      	subs	r3, #49	; 0x31
 8000a4a:	2b0d      	cmp	r3, #13
 8000a4c:	d83a      	bhi.n	8000ac4 <mode_change+0x84>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <mode_change+0x14>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a8d 	.word	0x08000a8d
 8000a58:	08000a9b 	.word	0x08000a9b
 8000a5c:	08000aa9 	.word	0x08000aa9
 8000a60:	08000ac5 	.word	0x08000ac5
 8000a64:	08000ac5 	.word	0x08000ac5
 8000a68:	08000ac5 	.word	0x08000ac5
 8000a6c:	08000ac5 	.word	0x08000ac5
 8000a70:	08000ac5 	.word	0x08000ac5
 8000a74:	08000ac5 	.word	0x08000ac5
 8000a78:	08000ac5 	.word	0x08000ac5
 8000a7c:	08000ac5 	.word	0x08000ac5
 8000a80:	08000ac5 	.word	0x08000ac5
 8000a84:	08000ac5 	.word	0x08000ac5
 8000a88:	08000ab7 	.word	0x08000ab7
	{
	case FREQ_STEP_1:
		main_step = 10;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <mode_change+0xa0>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	601a      	str	r2, [r3, #0]
		main_step_mode = FREQ_STEP_10;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <mode_change+0x9c>)
 8000a94:	2232      	movs	r2, #50	; 0x32
 8000a96:	701a      	strb	r2, [r3, #0]
		break;
 8000a98:	e018      	b.n	8000acc <mode_change+0x8c>
	case FREQ_STEP_10:
		main_step = 100;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <mode_change+0xa0>)
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	601a      	str	r2, [r3, #0]
		main_step_mode = FREQ_STEP_100;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <mode_change+0x9c>)
 8000aa2:	2233      	movs	r2, #51	; 0x33
 8000aa4:	701a      	strb	r2, [r3, #0]
		break;
 8000aa6:	e011      	b.n	8000acc <mode_change+0x8c>
	case FREQ_STEP_100:
		main_step = 2;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <mode_change+0xa0>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	601a      	str	r2, [r3, #0]
		main_step_mode = FREQ_STEP_SH;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <mode_change+0x9c>)
 8000ab0:	223e      	movs	r2, #62	; 0x3e
 8000ab2:	701a      	strb	r2, [r3, #0]
		break;
 8000ab4:	e00a      	b.n	8000acc <mode_change+0x8c>

	case FREQ_STEP_SH:
		main_step = 1;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <mode_change+0xa0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
		main_step_mode = FREQ_STEP_1;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <mode_change+0x9c>)
 8000abe:	2231      	movs	r2, #49	; 0x31
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e003      	b.n	8000acc <mode_change+0x8c>

	default:
		main_step_mode = FREQ_STEP_1;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <mode_change+0x9c>)
 8000ac6:	2231      	movs	r2, #49	; 0x31
 8000ac8:	701a      	strb	r2, [r3, #0]
		break;
 8000aca:	bf00      	nop
	};

	return main_step_mode;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <mode_change+0x9c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_TIM_PeriodElapsedCallback>:

/* main generator timer callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if (&htim9 == htim && NULL != sysgen)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d113      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x38>
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00f      	beq.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		//#ifdef __NORMALIZE_AMPLITUDE
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gen_get_norm_amp(sysgen));
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fdf1 	bl	80016e8 <gen_get_norm_amp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b0e:	f001 f844 	bl	8001b9a <HAL_DAC_SetValue>
		//#else
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sysgen->count);
		//#endif
		gen_tick(sysgen);
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fdca 	bl	80016b0 <gen_tick>
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000068 	.word	0x20000068
 8000b28:	2000004c 	.word	0x2000004c
 8000b2c:	20000054 	.word	0x20000054

08000b30 <HAL_GPIO_EXTI_Callback>:

/* control key interrupt callbacks */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop_IT(&htim9);
 8000b3a:	4858      	ldr	r0, [pc, #352]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b3c:	f001 ff44 	bl	80029c8 <HAL_TIM_Base_Stop_IT>

	switch(GPIO_Pin)
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b46:	d059      	beq.n	8000bfc <HAL_GPIO_EXTI_Callback+0xcc>
 8000b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b4c:	dc59      	bgt.n	8000c02 <HAL_GPIO_EXTI_Callback+0xd2>
 8000b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b52:	d03b      	beq.n	8000bcc <HAL_GPIO_EXTI_Callback+0x9c>
 8000b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b58:	dc53      	bgt.n	8000c02 <HAL_GPIO_EXTI_Callback+0xd2>
 8000b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b5e:	d01d      	beq.n	8000b9c <HAL_GPIO_EXTI_Callback+0x6c>
 8000b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b64:	dc4d      	bgt.n	8000c02 <HAL_GPIO_EXTI_Callback+0xd2>
 8000b66:	2b40      	cmp	r3, #64	; 0x40
 8000b68:	d00d      	beq.n	8000b86 <HAL_GPIO_EXTI_Callback+0x56>
 8000b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b6e:	d148      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0xd2>
	{
	/* divider ticks */
	case GPIO_PIN_8:
		if (tick_step > TICK_STEP_MIN) 	{ tick_step -= 1; }
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d945      	bls.n	8000c06 <HAL_GPIO_EXTI_Callback+0xd6>
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	4a47      	ldr	r2, [pc, #284]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b82:	6013      	str	r3, [r2, #0]
		break;
 8000b84:	e03f      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0xd6>
	case GPIO_PIN_6:
		if (tick_step < TICK_STEP_MAX)	{ tick_step += 1; }
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d23c      	bcs.n	8000c0a <HAL_GPIO_EXTI_Callback+0xda>
 8000b90:	4b43      	ldr	r3, [pc, #268]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a42      	ldr	r2, [pc, #264]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b98:	6013      	str	r3, [r2, #0]
		break;
 8000b9a:	e036      	b.n	8000c0a <HAL_GPIO_EXTI_Callback+0xda>

		/* main counter ticks */
	case GPIO_PIN_9:
		/* dec (or shift right) frequency */
		if (fine_step > main_step) {
 8000b9c:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d932      	bls.n	8000c0e <HAL_GPIO_EXTI_Callback+0xde>
			if (main_step_mode == FREQ_STEP_SH)
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <HAL_GPIO_EXTI_Callback+0x17c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b3e      	cmp	r3, #62	; 0x3e
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_EXTI_Callback+0x8c>
				fine_step = fine_step >> 1;
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bb8:	6013      	str	r3, [r2, #0]
			else
				fine_step -= main_step;
		}
		break;
 8000bba:	e028      	b.n	8000c0e <HAL_GPIO_EXTI_Callback+0xde>
				fine_step -= main_step;
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bc8:	6013      	str	r3, [r2, #0]
		break;
 8000bca:	e020      	b.n	8000c0e <HAL_GPIO_EXTI_Callback+0xde>

	case GPIO_PIN_11:
		/* inc (or shift left) frequency */
		if (fine_step < FREQ_STEP_MAX) {
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d21c      	bcs.n	8000c12 <HAL_GPIO_EXTI_Callback+0xe2>
			if (main_step_mode == FREQ_STEP_SH)
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_GPIO_EXTI_Callback+0x17c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8000bde:	d105      	bne.n	8000bec <HAL_GPIO_EXTI_Callback+0xbc>
				fine_step = fine_step << 1;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000be8:	6013      	str	r3, [r2, #0]
			else
				fine_step += main_step;
		}
		break;
 8000bea:	e012      	b.n	8000c12 <HAL_GPIO_EXTI_Callback+0xe2>
				fine_step += main_step;
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bf8:	6013      	str	r3, [r2, #0]
		break;
 8000bfa:	e00a      	b.n	8000c12 <HAL_GPIO_EXTI_Callback+0xe2>

	case GPIO_PIN_15:
		/* change freq regulation mode*/
		mode_change();
 8000bfc:	f7ff ff20 	bl	8000a40 <mode_change>
		break;
 8000c00:	e008      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0xe4>

	default:
		break;
 8000c02:	bf00      	nop
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0xe4>
		break;
 8000c06:	bf00      	nop
 8000c08:	e004      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0xe4>
		break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0xe4>
		break;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0xe4>
		break;
 8000c12:	bf00      	nop
	};

	/* reconfigure main generator */

	fine_step = clamp_ui32(fine_step, FREQ_STEP_MIN, FREQ_STEP_MAX);
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe2d 	bl	800087e <clamp_ui32>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c28:	6013      	str	r3, [r2, #0]
	tick_step = clamp_ui32(tick_step, TICK_STEP_MIN, TICK_STEP_MAX);
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2240      	movs	r2, #64	; 0x40
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe23 	bl	800087e <clamp_ui32>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000c3c:	6013      	str	r3, [r2, #0]

	gen_set_step(sysgen, fine_step);
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fcef 	bl	800162c <gen_set_step>
	gen_set_tick(sysgen, tick_step);
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fcd8 	bl	800160e <gen_set_tick>

	/* calculate approximate current frequency */
	curr_freq = (float)(base_freq * (float)(fine_step)) / (float)(tick_step + 1);
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c6a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000cb4 <HAL_GPIO_EXTI_Callback+0x184>
 8000c6e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x170>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x188>)
 8000c86:	edc3 7a00 	vstr	s15, [r3]

	print_info();
 8000c8a:	f7ff fe71 	bl	8000970 <print_info>

	HAL_TIM_Base_Start_IT(&htim9);
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000c90:	f001 fe2a 	bl	80028e8 <HAL_TIM_Base_Start_IT>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000068 	.word	0x20000068
 8000ca0:	20000048 	.word	0x20000048
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	2000004c 	.word	0x2000004c
 8000cb4:	4295fff4 	.word	0x4295fff4
 8000cb8:	2000000c 	.word	0x2000000c

08000cbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b092      	sub	sp, #72	; 0x48
 8000cc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	trigen __gen_main;
	sysgen = &__gen_main;
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <main+0x7c>)
 8000cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc8:	6013      	str	r3, [r2, #0]

	term_win __term_main;
	systerm = &__term_main;
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <main+0x80>)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	6013      	str	r3, [r2, #0]

	uint32_t start_step = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t start_tick = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40

	fine_step = start_step;
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <main+0x84>)
 8000cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cdc:	6013      	str	r3, [r2, #0]
	tick_step = start_tick;
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <main+0x88>)
 8000ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce2:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ce4:	f000 fd3e 	bl	8001764 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ce8:	f000 f832 	bl	8000d50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cec:	f000 f8fe 	bl	8000eec <MX_GPIO_Init>
	MX_DAC_Init();
 8000cf0:	f000 f898 	bl	8000e24 <MX_DAC_Init>
	MX_TIM9_Init();
 8000cf4:	f000 f8c0 	bl	8000e78 <MX_TIM9_Init>
	/* USER CODE BEGIN 2 */

	/* initialize main generator */
	gen_init(sysgen, GEN_12BIT, start_step, start_tick);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <main+0x7c>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d00:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000d04:	f000 fc33 	bl	800156e <gen_init>

	/* initialize terminal -> initialize lcd screen */
	term_init(systerm);
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <main+0x80>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fbf5 	bl	80014fc <term_init>
	HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f000 fd98 	bl	8001848 <HAL_Delay>

	print_info();
 8000d18:	f7ff fe2a 	bl	8000970 <print_info>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <main+0x8c>)
 8000d20:	f000 fee9 	bl	8001af6 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim9);
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <main+0x90>)
 8000d26:	f001 fddf 	bl	80028e8 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		term_draw(systerm);
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <main+0x80>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fad0 	bl	80012d4 <term_draw>
 8000d34:	e7f9      	b.n	8000d2a <main+0x6e>
 8000d36:	bf00      	nop
 8000d38:	2000004c 	.word	0x2000004c
 8000d3c:	20000050 	.word	0x20000050
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000048 	.word	0x20000048
 8000d48:	20000054 	.word	0x20000054
 8000d4c:	20000068 	.word	0x20000068

08000d50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
 8000d54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	2230      	movs	r2, #48	; 0x30
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f9ca 	bl	80030f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db4:	2310      	movs	r3, #16
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 f923 	bl	8002020 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000de0:	f000 f92c 	bl	800103c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2105      	movs	r1, #5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fb84 	bl	8002510 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000e0e:	f000 f915 	bl	800103c <Error_Handler>
	}
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_DAC_Init+0x50>)
 8000e36:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e3a:	f000 fe3a 	bl	8001ab2 <HAL_DAC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8000e44:	f000 f8fa 	bl	800103c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_DAC_Init+0x4c>)
 8000e58:	f000 fec4 	bl	8001be4 <HAL_DAC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8000e62:	f000 f8eb 	bl	800103c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000054 	.word	0x20000054
 8000e74:	40007400 	.word	0x40007400

08000e78 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000e8c:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <MX_TIM9_Init+0x70>)
 8000e8e:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 260;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000e9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea2:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000eb2:	f001 fcc9 	bl	8002848 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM9_Init+0x48>
	{
		Error_Handler();
 8000ebc:	f000 f8be 	bl	800103c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_TIM9_Init+0x6c>)
 8000ecc:	f001 feb3 	bl	8002c36 <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM9_Init+0x62>
	{
		Error_Handler();
 8000ed6:	f000 f8b1 	bl	800103c <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000068 	.word	0x20000068
 8000ee8:	40014000 	.word	0x40014000

08000eec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a47      	ldr	r2, [pc, #284]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a40      	ldr	r2, [pc, #256]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a39      	ldr	r2, [pc, #228]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a32      	ldr	r2, [pc, #200]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <MX_GPIO_Init+0x13c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin|LCDRW_PIN_Pin|LCDEN_PIN_Pin|LCDD4_PIN_Pin
 8000f72:	2200      	movs	r2, #0
 8000f74:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8000f78:	482c      	ldr	r0, [pc, #176]	; (800102c <MX_GPIO_Init+0x140>)
 8000f7a:	f001 f81f 	bl	8001fbc <HAL_GPIO_WritePin>
			|LCDD5_PIN_Pin|LCDD6_PIN_Pin|LCDD7_PIN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f84:	482a      	ldr	r0, [pc, #168]	; (8001030 <MX_GPIO_Init+0x144>)
 8000f86:	f001 f819 	bl	8001fbc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCDRS_PIN_Pin LCDRW_PIN_Pin LCDEN_PIN_Pin LCDD4_PIN_Pin
                           LCDD5_PIN_Pin LCDD6_PIN_Pin LCDD7_PIN_Pin */
	GPIO_InitStruct.Pin = LCDRS_PIN_Pin|LCDRW_PIN_Pin|LCDEN_PIN_Pin|LCDD4_PIN_Pin
 8000f8a:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000f8e:	617b      	str	r3, [r7, #20]
			|LCDD5_PIN_Pin|LCDD6_PIN_Pin|LCDD7_PIN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4822      	ldr	r0, [pc, #136]	; (800102c <MX_GPIO_Init+0x140>)
 8000fa4:	f000 fe6e 	bl	8001c84 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481b      	ldr	r0, [pc, #108]	; (8001030 <MX_GPIO_Init+0x144>)
 8000fc2:	f000 fe5f 	bl	8001c84 <HAL_GPIO_Init>

	/*Configure GPIO pins : TICK_DEC_Pin TICK_INC_Pin STEP_DEC_Pin STEP_INC_Pin */
	GPIO_InitStruct.Pin = TICK_DEC_Pin|TICK_INC_Pin|STEP_DEC_Pin|STEP_INC_Pin;
 8000fc6:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000fca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <MX_GPIO_Init+0x148>)
 8000fde:	f000 fe51 	bl	8001c84 <HAL_GPIO_Init>

	/*Configure GPIO pin : FINE_OR_FAST_Pin */
	GPIO_InitStruct.Pin = FINE_OR_FAST_Pin;
 8000fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(FINE_OR_FAST_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <MX_GPIO_Init+0x14c>)
 8000ffa:	f000 fe43 	bl	8001c84 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2101      	movs	r1, #1
 8001002:	2017      	movs	r0, #23
 8001004:	f000 fd1f 	bl	8001a46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001008:	2017      	movs	r0, #23
 800100a:	f000 fd38 	bl	8001a7e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2101      	movs	r1, #1
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f000 fd17 	bl	8001a46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f000 fd30 	bl	8001a7e <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40020800 	.word	0x40020800
 8001038:	40020000 	.word	0x40020000

0800103c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_MspInit+0x4c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x4c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_DAC_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d127      	bne.n	800110a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_DAC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f2:	2310      	movs	r3, #16
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_DAC_MspInit+0x84>)
 8001106:	f000 fdbd 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40007400 	.word	0x40007400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_TIM_Base_MspInit+0x48>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d115      	bne.n	800115e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_TIM_Base_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a0c      	ldr	r2, [pc, #48]	; (800116c <HAL_TIM_Base_MspInit+0x4c>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_Base_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2102      	movs	r1, #2
 8001152:	2018      	movs	r0, #24
 8001154:	f000 fc77 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001158:	2018      	movs	r0, #24
 800115a:	f000 fc90 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40014000 	.word	0x40014000
 800116c:	40023800 	.word	0x40023800

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 fb24 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011c8:	2040      	movs	r0, #64	; 0x40
 80011ca:	f000 ff11 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011d2:	f000 ff0d 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80011d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011da:	f000 ff09 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011ea:	f001 fc1c 	bl	8002a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000068 	.word	0x20000068

080011f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80011fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001200:	f000 fef6 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001204:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001208:	f000 fef2 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <term_request_update>:
#include <string.h>
#include <stdbool.h>

/* not used anywhere, but we can use this in conjuntion with @term_draw to force a redraw */
inline void term_request_update(term_win *term)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	term->flags.update_req = true;
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <term_reject_update>:

inline void term_reject_update(term_win *term)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	term->flags.update_req = false;
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001264:	f36f 0300 	bfc	r3, #0, #1
 8001268:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <term_goto>:

/* sets cursor xpos to @x, ypos to @y */
void term_goto(term_win *term, const uint8_t x, const uint8_t y)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	70bb      	strb	r3, [r7, #2]
	term->cursor_x = x;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	term->cursor_y = y;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	78ba      	ldrb	r2, [r7, #2]
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <term_cls>:

/* clears terminal primary buffer */
void term_cls(term_win *term)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	term_goto(term, 0, 0);    //return home
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe1 	bl	8001278 <term_goto>

	memset(term->win, ' ', term->size);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	461a      	mov	r2, r3
 80012c0:	2120      	movs	r1, #32
 80012c2:	f001 ff19 	bl	80030f8 <memset>

	term_request_update(term);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffb4 	bl	8001234 <term_request_update>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <term_draw>:
this function is somewhat fast and sometimes lcd display can't keep up with it
so it actually redraws the screen only if @updateRequest flag of @std_win is set
if you need to actively redraw lcd screen every tick use @term_req_upd before calling this
 */
void term_draw(term_win *term)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if (term->flags.update_req) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d02d      	beq.n	8001348 <term_draw+0x74>

		term_reject_update(term);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffb2 	bl	8001256 <term_reject_update>

		for (uint8_t i = 0; i < term->rows; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e021      	b.n	800133c <term_draw+0x68>
			for (uint8_t j = 0; j < term->cols; j++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	73bb      	strb	r3, [r7, #14]
 80012fc:	e015      	b.n	800132a <term_draw+0x56>
				lcd_goto(i, j);
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fa31 	bl	800076c <lcd_goto>
				lcd_putch(term->win[i * term->cols + j]);
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	4413      	add	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa10 	bl	8000744 <lcd_putch>
			for (uint8_t j = 0; j < term->cols; j++) {
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	3301      	adds	r3, #1
 8001328:	73bb      	strb	r3, [r7, #14]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001330:	7bba      	ldrb	r2, [r7, #14]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e3      	bcc.n	80012fe <term_draw+0x2a>
		for (uint8_t i = 0; i < term->rows; i++) {
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3d7      	bcc.n	80012f8 <term_draw+0x24>
			}
		}
	}
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <term_putchxy>:

/* prints given @ch on coordinates @x, @y */
void term_putchxy(term_win *term, const char ch, const uint8_t x, const uint8_t y)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4603      	mov	r3, r0
 8001360:	70fb      	strb	r3, [r7, #3]
 8001362:	460b      	mov	r3, r1
 8001364:	70bb      	strb	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	707b      	strb	r3, [r7, #1]
	if ( term->cols > x && term->rows > y ) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001370:	78ba      	ldrb	r2, [r7, #2]
 8001372:	429a      	cmp	r2, r3
 8001374:	d227      	bcs.n	80013c6 <term_putchxy+0x76>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800137c:	787a      	ldrb	r2, [r7, #1]
 800137e:	429a      	cmp	r2, r3
 8001380:	d221      	bcs.n	80013c6 <term_putchxy+0x76>
		uint8_t cursor_xprev = term->cursor_x;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001388:	73fb      	strb	r3, [r7, #15]
		uint8_t cursor_yprev = term->cursor_y;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001390:	73bb      	strb	r3, [r7, #14]

		term_goto(term, x, y);    // move cursors
 8001392:	787a      	ldrb	r2, [r7, #1]
 8001394:	78bb      	ldrb	r3, [r7, #2]
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff6d 	bl	8001278 <term_goto>
		term->win[y * term->cols + x] = ch;
 800139e:	787b      	ldrb	r3, [r7, #1]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80013a6:	fb02 f203 	mul.w	r2, r2, r3
 80013aa:	78bb      	ldrb	r3, [r7, #2]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	78f9      	ldrb	r1, [r7, #3]
 80013b2:	54d1      	strb	r1, [r2, r3]
		term_goto(term, cursor_xprev, cursor_yprev); // reset cursor
 80013b4:	7bba      	ldrb	r2, [r7, #14]
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff5c 	bl	8001278 <term_goto>

		term_request_update(term);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff37 	bl	8001234 <term_request_update>
	}
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <term_putch>:

/* prints a @ch at current cursor position and advances cursor once */
void term_putch(term_win *term, const char ch)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
	uint8_t x = term->cursor_x;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013e0:	73fb      	strb	r3, [r7, #15]
	uint8_t y = term->cursor_y;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e8:	73bb      	strb	r3, [r7, #14]

	term->flags.h_overflow = false;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013f0:	f36f 03c3 	bfc	r3, #3, #1
 80013f4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.v_overflow = false;
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013fe:	f36f 1304 	bfc	r3, #4, #1
 8001402:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	if (ch != '\n')
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	2b0a      	cmp	r3, #10
 800140a:	d00a      	beq.n	8001422 <term_putch+0x54>
		term->win[y * term->cols + x] = ch;
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	4413      	add	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	78f9      	ldrb	r1, [r7, #3]
 8001420:	54d1      	strb	r1, [r2, r3]

	term_request_update(term);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff06 	bl	8001234 <term_request_update>

	term->cursor_x++;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800142e:	3301      	adds	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	/* line overflow */
	if (term->cursor_x > term->cols - 1 || ch == '\n') {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001444:	429a      	cmp	r2, r3
 8001446:	d902      	bls.n	800144e <term_putch+0x80>
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d112      	bne.n	8001474 <term_putch+0xa6>
		term->cursor_x = 0;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		term->cursor_y++;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		term->flags.h_overflow = true;
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	}

	/* vertical overflow */
	if (term->cursor_y > term->rows)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001480:	429a      	cmp	r2, r3
 8001482:	d90a      	bls.n	800149a <term_putch+0xcc>
	{
		term->cursor_y = 0;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		term->flags.v_overflow = true;
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	}
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <term_putsxy>:
		str++;
	}
}

void term_putsxy(term_win *term, const char *str, const uint8_t x, const uint8_t y)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	4611      	mov	r1, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71bb      	strb	r3, [r7, #6]
	term_goto(term, x, y);
 80014b8:	79ba      	ldrb	r2, [r7, #6]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff feda 	bl	8001278 <term_goto>

	while (*str != '\0') {
 80014c4:	e010      	b.n	80014e8 <term_putsxy+0x46>
		term_putch(term, *str);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff ff7e 	bl	80013ce <term_putch>

		if (term->flags.h_overflow)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <term_putsxy+0x50>
			break;

		str++;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
	while (*str != '\0') {
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ea      	bne.n	80014c6 <term_putsxy+0x24>
	}
}
 80014f0:	e000      	b.n	80014f4 <term_putsxy+0x52>
			break;
 80014f2:	bf00      	nop
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <term_init>:

/* initializes std_win terminal */
void term_init(term_win *term)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	lcd_init(LCD_CFG_4BIT_2LINE_5X8,
 8001504:	2206      	movs	r2, #6
 8001506:	210c      	movs	r1, #12
 8001508:	2028      	movs	r0, #40	; 0x28
 800150a:	f7ff f987 	bl	800081c <lcd_init>
			 LCD_CFG_DISPLAY1_BLINK0_CURSOR0,
			 LCD_CFG_INC_NOSHIFT
			);      // initialize lcd display

	term->cursor_x = 0;   // set default cursor position
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	term->cursor_y = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	term->size = TERM_2L_SIZE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
	term->rows = 2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	term->cols = 16;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2210      	movs	r2, #16
 8001532:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	term->flags.blink = false;   // force first update
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800153c:	f36f 0341 	bfc	r3, #1, #1
 8001540:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.cursor = false;     // not implemented yet
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800154a:	f36f 0382 	bfc	r3, #2, #1
 800154e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.update_req = true;
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	term_cls(term);     //flush the screen buffer
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fe9f 	bl	80012a4 <term_cls>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <gen_init>:
enum GEN_ERR gen_set_tick(trigen *generator, uint32_t tick);
enum GEN_ERR gen_set_step(trigen *generator, uint32_t step);

/* initializer */
enum GEN_ERR gen_init(trigen *generator, uint32_t amp_max, uint32_t step, uint32_t tick)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
	generator->count = 0;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
	generator->tick = 0;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]

	if (GEN_EOK != gen_set_amp(generator, amp_max)) {
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f81c 	bl	80015c8 <gen_set_amp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <gen_init+0x2c>
		return GEN_EARG;
 8001596:	2301      	movs	r3, #1
 8001598:	e012      	b.n	80015c0 <gen_init+0x52>
	}

	if (GEN_EOK != gen_set_step(generator, step)) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f845 	bl	800162c <gen_set_step>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <gen_init+0x3e>
		return GEN_EARG;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e009      	b.n	80015c0 <gen_init+0x52>
	}

	if (GEN_EOK != gen_set_tick(generator, tick)) {
 80015ac:	6839      	ldr	r1, [r7, #0]
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f82d 	bl	800160e <gen_set_tick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <gen_init+0x50>
		return GEN_EARG;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <gen_init+0x52>
	}

	return GEN_EOK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <gen_set_amp>:

/* set methods */
enum GEN_ERR gen_set_amp(trigen *generator, uint32_t amplitude)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	switch(amplitude)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d005      	beq.n	80015e4 <gen_set_amp+0x1c>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015de:	4293      	cmp	r3, r2
 80015e0:	d005      	beq.n	80015ee <gen_set_amp+0x26>
 80015e2:	e00a      	b.n	80015fa <gen_set_amp+0x32>
	{
		case GEN_8BIT:
			generator->count_overflow = GEN_8BIT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	605a      	str	r2, [r3, #4]
			return GEN_EOK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e009      	b.n	8001602 <gen_set_amp+0x3a>
			break;

		case GEN_12BIT:
			generator->count_overflow = GEN_12BIT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015f4:	605a      	str	r2, [r3, #4]
			return GEN_EOK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e003      	b.n	8001602 <gen_set_amp+0x3a>
			break;

		default:
			generator->count_overflow = 1;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	605a      	str	r2, [r3, #4]
			return GEN_EARG;
 8001600:	2301      	movs	r3, #1
			break;
	};

	return GEN_EARG;
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <gen_set_tick>:

enum GEN_ERR gen_set_tick(trigen *generator, uint32_t tick)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
	generator->tick_overflow = tick;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	60da      	str	r2, [r3, #12]
	return GEN_EOK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <gen_set_step>:

enum GEN_ERR gen_set_step(trigen *generator, uint32_t step)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	if (step != 0 && step < MAX_AMPLITUDE) {
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <gen_set_step+0x3c>
 800163c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4293      	cmp	r3, r2
 8001644:	d210      	bcs.n	8001668 <gen_set_step+0x3c>
		generator->step = step;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	601a      	str	r2, [r3, #0]
		generator->norm_maximum = generator->step * ( generator->count_overflow / generator->step);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6851      	ldr	r1, [r2, #4]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fbb1 f2f2 	udiv	r2, r1, r2
 800165c:	fb02 f203 	mul.w	r2, r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	615a      	str	r2, [r3, #20]
		return GEN_EOK;
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <gen_set_step+0x3e>
	} else {
		return GEN_EARG;
 8001668:	2301      	movs	r3, #1
	}
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <gen_count>:

/* generation helper function */
enum GEN_ERR gen_count(trigen *generator)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	generator->count += generator->step;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	441a      	add	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]

	if (generator->count > generator->count_overflow) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d904      	bls.n	80016a2 <gen_count+0x2c>
		generator->count = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
		return GEN_EOVF;
 800169e:	2302      	movs	r3, #2
 80016a0:	e000      	b.n	80016a4 <gen_count+0x2e>
	}

	return GEN_EOK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <gen_tick>:

/* main generation function */
enum GEN_ERR gen_tick(trigen *generator)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	generator->tick++;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]

	if (generator->tick > generator->tick_overflow) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d907      	bls.n	80016de <gen_tick+0x2e>
		gen_count(generator);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffd1 	bl	8001676 <gen_count>
		generator->tick = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
		return GEN_EOVF;
 80016da:	2302      	movs	r3, #2
 80016dc:	e000      	b.n	80016e0 <gen_tick+0x30>
	}

	return GEN_EOK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <gen_get_norm_amp>:

inline const uint32_t gen_get_norm_amp(trigen *generator)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	//uint32_t max_amplitude = generator->step * ( generator->count_overflow / generator->step);
	return (generator->count * generator->count_overflow) / generator->norm_maximum;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6852      	ldr	r2, [r2, #4]
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopFillZerobss+0x26>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff fd69 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f001 fcb7 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fabb 	bl	8000cbc <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001754:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 8001758:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800175c:	200000b4 	.word	0x200000b4

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_Init+0x40>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_Init+0x40>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x40>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f94f 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f808 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fc56 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x54>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f967 	bl	8001a9a <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e4:	f000 f92f 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x5c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000020 	.word	0x20000020
 8001800:	20000028 	.word	0x20000028
 8001804:	20000024 	.word	0x20000024

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000028 	.word	0x20000028
 800182c:	200000b0 	.word	0x200000b0

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	200000b0 	.word	0x200000b0

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000028 	.word	0x20000028

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff3e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff31 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e014      	b.n	8001aee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fadf 	bl	8001098 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	795b      	ldrb	r3, [r3, #5]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_DAC_Start+0x16>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e040      	b.n	8001b8e <HAL_DAC_Start+0x98>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b40:	2b3c      	cmp	r3, #60	; 0x3c
 8001b42:	d11d      	bne.n	8001b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	e014      	b.n	8001b80 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	213c      	movs	r1, #60	; 0x3c
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e004      	b.n	8001bce <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3314      	adds	r3, #20
 8001bcc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	795b      	ldrb	r3, [r3, #5]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_DAC_ConfigChannel+0x18>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e03c      	b.n	8001c76 <HAL_DAC_ConfigChannel+0x92>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2202      	movs	r2, #2
 8001c06:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4013      	ands	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	22c0      	movs	r2, #192	; 0xc0
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e16b      	b.n	8001f78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	f040 815a 	bne.w	8001f72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d005      	beq.n	8001cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d130      	bne.n	8001d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80b4 	beq.w	8001f72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a5f      	ldr	r2, [pc, #380]	; (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_GPIO_Init+0x30c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e26:	4a5b      	ldr	r2, [pc, #364]	; (8001f94 <HAL_GPIO_Init+0x310>)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x314>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x226>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x318>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x222>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x31c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x21e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x320>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x324>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x328>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x32c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4b      	ldr	r2, [pc, #300]	; (8001fb4 <HAL_GPIO_Init+0x330>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x20a>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e00e      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001e8e:	2308      	movs	r3, #8
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x228>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x310>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_GPIO_Init+0x334>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f ae90 	bls.w	8001ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021400 	.word	0x40021400
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	40021c00 	.word	0x40021c00
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd8:	e003      	b.n	8001fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fd8e 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e264      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	4ba3      	ldr	r3, [pc, #652]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00c      	beq.n	8002064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	2b08      	cmp	r3, #8
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05b      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d157      	bne.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e23f      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x74>
 8002086:	4b91      	ldr	r3, [pc, #580]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a90      	ldr	r2, [pc, #576]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 80020b8:	4b84      	ldr	r3, [pc, #528]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a83      	ldr	r2, [pc, #524]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a80      	ldr	r2, [pc, #512]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fbaa 	bl	8001830 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fba6 	bl	8001830 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e204      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb96 	bl	8001830 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fb92 	bl	8001830 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1f0      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b62      	ldr	r3, [pc, #392]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1c4      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4952      	ldr	r1, [pc, #328]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x2b0>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fb4b 	bl	8001830 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff fb47 	bl	8001830 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1a5      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4940      	ldr	r1, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x2b0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff fb2a 	bl	8001830 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff fb26 	bl	8001830 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e184      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d030      	beq.n	800226c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x2b4>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff fb0a 	bl	8001830 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fb06 	bl	8001830 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e164      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x200>
 800223e:	e015      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x2b4>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff faf3 	bl	8001830 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7ff faef 	bl	8001830 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e14d      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a0 	beq.w	80023ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7ff fab5 	bl	8001830 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e011      	b.n	80022ee <HAL_RCC_OscConfig+0x2ce>
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	42470000 	.word	0x42470000
 80022d4:	42470e80 	.word	0x42470e80
 80022d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7ff faa8 	bl	8001830 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e106      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x4e4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x2f0>
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a80      	ldr	r2, [pc, #512]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	e01c      	b.n	800234a <HAL_RCC_OscConfig+0x32a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x312>
 8002318:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a7a      	ldr	r2, [pc, #488]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b78      	ldr	r3, [pc, #480]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a77      	ldr	r2, [pc, #476]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0x32a>
 8002332:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a74      	ldr	r2, [pc, #464]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
 800233e:	4b72      	ldr	r3, [pc, #456]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a71      	ldr	r2, [pc, #452]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fa6d 	bl	8001830 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fa69 	bl	8001830 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0c5      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ee      	beq.n	800235a <HAL_RCC_OscConfig+0x33a>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fa57 	bl	8001830 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fa53 	bl	8001830 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0af      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	4b5a      	ldr	r3, [pc, #360]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b56      	ldr	r3, [pc, #344]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 809b 	beq.w	80024fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d05c      	beq.n	800248a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d141      	bne.n	800245c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_OscConfig+0x4ec>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fa27 	bl	8001830 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff fa23 	bl	8001830 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e081      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	019b      	lsls	r3, r3, #6
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	3b01      	subs	r3, #1
 800241e:	041b      	lsls	r3, r3, #16
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	061b      	lsls	r3, r3, #24
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_RCC_OscConfig+0x4ec>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f9fc 	bl	8001830 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff f9f8 	bl	8001830 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e056      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x41c>
 800245a:	e04e      	b.n	80024fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x4ec>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff f9e5 	bl	8001830 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff f9e1 	bl	8001830 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e03f      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x44a>
 8002488:	e037      	b.n	80024fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e032      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCC_OscConfig+0x4e8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d028      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d121      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d11a      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d111      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40007000 	.word	0x40007000
 8002508:	40023800 	.word	0x40023800
 800250c:	42470060 	.word	0x42470060

08002510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0cc      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d90c      	bls.n	800254c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d044      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d119      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e067      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4934      	ldr	r1, [pc, #208]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7ff f916 	bl	8001830 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7ff f912 	bl	8001830 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d20c      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f876 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08003144 	.word	0x08003144
 80026d4:	20000020 	.word	0x20000020
 80026d8:	20000024 	.word	0x20000024

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e2:	2100      	movs	r1, #0
 80026e4:	6079      	str	r1, [r7, #4]
 80026e6:	2100      	movs	r1, #0
 80026e8:	60f9      	str	r1, [r7, #12]
 80026ea:	2100      	movs	r1, #0
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ee:	2100      	movs	r1, #0
 80026f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f2:	4952      	ldr	r1, [pc, #328]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 80026f4:	6889      	ldr	r1, [r1, #8]
 80026f6:	f001 010c 	and.w	r1, r1, #12
 80026fa:	2908      	cmp	r1, #8
 80026fc:	d00d      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x3e>
 80026fe:	2908      	cmp	r1, #8
 8002700:	f200 8094 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x150>
 8002704:	2900      	cmp	r1, #0
 8002706:	d002      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x32>
 8002708:	2904      	cmp	r1, #4
 800270a:	d003      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x38>
 800270c:	e08e      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <HAL_RCC_GetSysClockFreq+0x164>)
 8002710:	60bb      	str	r3, [r7, #8]
       break;
 8002712:	e08e      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <HAL_RCC_GetSysClockFreq+0x168>)
 8002716:	60bb      	str	r3, [r7, #8]
      break;
 8002718:	e08b      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271a:	4948      	ldr	r1, [pc, #288]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 800271c:	6849      	ldr	r1, [r1, #4]
 800271e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002722:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002724:	4945      	ldr	r1, [pc, #276]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 8002726:	6849      	ldr	r1, [r1, #4]
 8002728:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800272c:	2900      	cmp	r1, #0
 800272e:	d024      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002730:	4942      	ldr	r1, [pc, #264]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 8002732:	6849      	ldr	r1, [r1, #4]
 8002734:	0989      	lsrs	r1, r1, #6
 8002736:	4608      	mov	r0, r1
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002740:	f04f 0500 	mov.w	r5, #0
 8002744:	ea00 0204 	and.w	r2, r0, r4
 8002748:	ea01 0305 	and.w	r3, r1, r5
 800274c:	493d      	ldr	r1, [pc, #244]	; (8002844 <HAL_RCC_GetSysClockFreq+0x168>)
 800274e:	fb01 f003 	mul.w	r0, r1, r3
 8002752:	2100      	movs	r1, #0
 8002754:	fb01 f102 	mul.w	r1, r1, r2
 8002758:	1844      	adds	r4, r0, r1
 800275a:	493a      	ldr	r1, [pc, #232]	; (8002844 <HAL_RCC_GetSysClockFreq+0x168>)
 800275c:	fba2 0101 	umull	r0, r1, r2, r1
 8002760:	1863      	adds	r3, r4, r1
 8002762:	4619      	mov	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	f7fd fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e04a      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	461a      	mov	r2, r3
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	ea02 0400 	and.w	r4, r2, r0
 8002792:	ea03 0501 	and.w	r5, r3, r1
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	014b      	lsls	r3, r1, #5
 80027a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027a8:	0142      	lsls	r2, r0, #5
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	1b00      	subs	r0, r0, r4
 80027b0:	eb61 0105 	sbc.w	r1, r1, r5
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	018b      	lsls	r3, r1, #6
 80027be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027c2:	0182      	lsls	r2, r0, #6
 80027c4:	1a12      	subs	r2, r2, r0
 80027c6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027d8:	00d0      	lsls	r0, r2, #3
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	1912      	adds	r2, r2, r4
 80027e0:	eb45 0303 	adc.w	r3, r5, r3
 80027e4:	f04f 0000 	mov.w	r0, #0
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	0299      	lsls	r1, r3, #10
 80027ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027f2:	0290      	lsls	r0, r2, #10
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f7fd fce0 	bl	80001c8 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_GetSysClockFreq+0x160>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	60bb      	str	r3, [r7, #8]
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCC_GetSysClockFreq+0x164>)
 800282e:	60bb      	str	r3, [r7, #8]
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	68bb      	ldr	r3, [r7, #8]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400
 8002844:	017d7840 	.word	0x017d7840

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e041      	b.n	80028de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fc56 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fac4 	bl	8002e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d001      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e04e      	b.n	800299e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_TIM_Base_Start_IT+0xc4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d022      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d01d      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d018      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x80>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	e007      	b.n	800299c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40010400 	.word	0x40010400
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40001800 	.word	0x40001800

080029c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <HAL_TIM_Base_Stop_IT+0x48>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	f240 4344 	movw	r3, #1092	; 0x444
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_Base_Stop_IT+0x48>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d122      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0202 	mvn.w	r2, #2
 8002a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9b5 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
 8002a6e:	e005      	b.n	8002a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9a7 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9b8 	bl	8002dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d122      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d11b      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0204 	mvn.w	r2, #4
 8002aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f98b 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
 8002ac2:	e005      	b.n	8002ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f97d 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f98e 	bl	8002dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d122      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0208 	mvn.w	r2, #8
 8002afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f961 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
 8002b16:	e005      	b.n	8002b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f953 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f964 	bl	8002dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d122      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d11b      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0210 	mvn.w	r2, #16
 8002b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2208      	movs	r2, #8
 8002b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f937 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
 8002b6a:	e005      	b.n	8002b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f929 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f93a 	bl	8002dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0201 	mvn.w	r2, #1
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fd ff9d 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fa63 	bl	800309c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d10e      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d107      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8ff 	bl	8002e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d10e      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d107      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0220 	mvn.w	r2, #32
 8002c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fa2d 	bl	8003088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_ConfigClockSource+0x1c>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0b4      	b.n	8002dbc <HAL_TIM_ConfigClockSource+0x186>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d03e      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xd4>
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	f200 8087 	bhi.w	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c98:	f000 8086 	beq.w	8002da8 <HAL_TIM_ConfigClockSource+0x172>
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d87f      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca2:	2b70      	cmp	r3, #112	; 0x70
 8002ca4:	d01a      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0xa6>
 8002ca6:	2b70      	cmp	r3, #112	; 0x70
 8002ca8:	d87b      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	2b60      	cmp	r3, #96	; 0x60
 8002cac:	d050      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0x11a>
 8002cae:	2b60      	cmp	r3, #96	; 0x60
 8002cb0:	d877      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb2:	2b50      	cmp	r3, #80	; 0x50
 8002cb4:	d03c      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xfa>
 8002cb6:	2b50      	cmp	r3, #80	; 0x50
 8002cb8:	d873      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d058      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x13a>
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d86f      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc2:	2b30      	cmp	r3, #48	; 0x30
 8002cc4:	d064      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc6:	2b30      	cmp	r3, #48	; 0x30
 8002cc8:	d86b      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d060      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x15a>
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d867      	bhi.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d05c      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x15a>
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d05a      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x15a>
 8002cda:	e062      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f000 f9ac 	bl	8003048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]
      break;
 8002d08:	e04f      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f000 f995 	bl	8003048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e03c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f000 f909 	bl	8002f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2150      	movs	r1, #80	; 0x50
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f962 	bl	8003012 <TIM_ITRx_SetConfig>
      break;
 8002d4e:	e02c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f000 f928 	bl	8002fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2160      	movs	r1, #96	; 0x60
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f952 	bl	8003012 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e01c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f000 f8e9 	bl	8002f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f942 	bl	8003012 <TIM_ITRx_SetConfig>
      break;
 8002d8e:	e00c      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 f939 	bl	8003012 <TIM_ITRx_SetConfig>
      break;
 8002da0:	e003      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      break;
 8002da6:	e000      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a40      	ldr	r2, [pc, #256]	; (8002f28 <TIM_Base_SetConfig+0x114>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e32:	d00f      	beq.n	8002e54 <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3d      	ldr	r2, [pc, #244]	; (8002f2c <TIM_Base_SetConfig+0x118>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00b      	beq.n	8002e54 <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	; (8002f30 <TIM_Base_SetConfig+0x11c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d007      	beq.n	8002e54 <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <TIM_Base_SetConfig+0x120>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3a      	ldr	r2, [pc, #232]	; (8002f38 <TIM_Base_SetConfig+0x124>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <TIM_Base_SetConfig+0x114>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d02b      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d027      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <TIM_Base_SetConfig+0x118>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d023      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a2b      	ldr	r2, [pc, #172]	; (8002f30 <TIM_Base_SetConfig+0x11c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01f      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <TIM_Base_SetConfig+0x120>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01b      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <TIM_Base_SetConfig+0x124>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d017      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <TIM_Base_SetConfig+0x128>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a27      	ldr	r2, [pc, #156]	; (8002f40 <TIM_Base_SetConfig+0x12c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00f      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <TIM_Base_SetConfig+0x130>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <TIM_Base_SetConfig+0x134>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <TIM_Base_SetConfig+0x138>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <TIM_Base_SetConfig+0x13c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <TIM_Base_SetConfig+0x114>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0xf8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <TIM_Base_SetConfig+0x124>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	615a      	str	r2, [r3, #20]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40010400 	.word	0x40010400
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400
 8002f44:	40014800 	.word	0x40014800
 8002f48:	40001800 	.word	0x40001800
 8002f4c:	40001c00 	.word	0x40001c00
 8002f50:	40002000 	.word	0x40002000

08002f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 030a 	bic.w	r3, r3, #10
 8002f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b087      	sub	sp, #28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0210 	bic.w	r2, r3, #16
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	031b      	lsls	r3, r3, #12
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	621a      	str	r2, [r3, #32]
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	f043 0307 	orr.w	r3, r3, #7
 8003034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	021a      	lsls	r2, r3, #8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	431a      	orrs	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4d0d      	ldr	r5, [pc, #52]	; (80030e8 <__libc_init_array+0x38>)
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	2600      	movs	r6, #0
 80030bc:	42a6      	cmp	r6, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	4d0b      	ldr	r5, [pc, #44]	; (80030f0 <__libc_init_array+0x40>)
 80030c2:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <__libc_init_array+0x44>)
 80030c4:	f000 f820 	bl	8003108 <_init>
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	2600      	movs	r6, #0
 80030ce:	42a6      	cmp	r6, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d8:	4798      	blx	r3
 80030da:	3601      	adds	r6, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e2:	4798      	blx	r3
 80030e4:	3601      	adds	r6, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	0800315c 	.word	0x0800315c
 80030ec:	0800315c 	.word	0x0800315c
 80030f0:	0800315c 	.word	0x0800315c
 80030f4:	08003160 	.word	0x08003160

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
