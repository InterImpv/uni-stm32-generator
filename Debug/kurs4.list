
kurs4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800303c  0800303c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003044  08003044  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800304c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000088  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c94e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001daa  00000000  00000000  0002c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021216  00000000  00000000  0002fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4eb  00000000  00000000  0005100e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca600  00000000  00000000  0005d4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127af9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003088  00000000  00000000  00127b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ff0 	.word	0x08002ff0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002ff0 	.word	0x08002ff0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <sys_delay>:

/*
 * sys_delay:	@resolution = 1 ms
 */
static void sys_delay(uint32_t ms)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint32_t delay = HAL_GetTick() + ms;
 80004c8:	f001 f8ce 	bl	8001668 <HAL_GetTick>
 80004cc:	4602      	mov	r2, r0
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
	while(HAL_GetTick() < delay);
 80004d4:	bf00      	nop
 80004d6:	f001 f8c7 	bl	8001668 <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4293      	cmp	r3, r2
 80004e0:	d8f9      	bhi.n	80004d6 <sys_delay+0x16>
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <lcd_strobe>:
//static const uint8_t __LCD_CGRAM = 5;

/* private lcd constants END */

static void lcd_strobe(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDEN_PIN_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <lcd_strobe+0x28>)
 80004f8:	f001 fc58 	bl	8001dac <HAL_GPIO_WritePin>
    sys_delay(LCDT_1MS);
 80004fc:	2301      	movs	r3, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffde 	bl	80004c0 <sys_delay>
    HAL_GPIO_WritePin(GPIOE, LCDEN_PIN_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050a:	4802      	ldr	r0, [pc, #8]	; (8000514 <lcd_strobe+0x28>)
 800050c:	f001 fc4e 	bl	8001dac <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <lcd_set_high>:

/* send upper nible */
static void lcd_set_high(uint8_t data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, LCDD4_PIN_Pin, data & 0x10);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0310 	and.w	r3, r3, #16
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <lcd_set_high+0x64>)
 8000532:	f001 fc3b 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD5_PIN_Pin, data & 0x20);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <lcd_set_high+0x64>)
 8000546:	f001 fc31 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD6_PIN_Pin, data & 0x40);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <lcd_set_high+0x64>)
 800055a:	f001 fc27 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD7_PIN_Pin, data & 0x80);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <lcd_set_high+0x64>)
 800056e:	f001 fc1d 	bl	8001dac <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <lcd_set_low>:

/* send lower nibble */
static void lcd_set_low(uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, LCDD4_PIN_Pin, data & 0x01);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <lcd_set_low+0x64>)
 800059a:	f001 fc07 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD5_PIN_Pin, data & 0x02);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <lcd_set_low+0x64>)
 80005ae:	f001 fbfd 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD6_PIN_Pin, data & 0x04);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <lcd_set_low+0x64>)
 80005c2:	f001 fbf3 	bl	8001dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCDD7_PIN_Pin, data & 0x08);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <lcd_set_low+0x64>)
 80005d6:	f001 fbe9 	bl	8001dac <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <lcd_command_mode>:

/* sending instruction: RS <= 1'b0 */
static void lcd_command_mode(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <lcd_command_mode+0x14>)
 80005f2:	f001 fbdb 	bl	8001dac <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <lcd_data_mode>:

/* sending data: RS <= 1'b1 */
static void lcd_data_mode(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <lcd_data_mode+0x14>)
 800060a:	f001 fbcf 	bl	8001dac <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <lcd_config>:

static enum LCD_ERR lcd_config(uint8_t param)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if (param != LCD_CFG_4BIT_1LINE_5X8 ||
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b20      	cmp	r3, #32
 8000626:	d102      	bne.n	800062e <lcd_config+0x16>
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b28      	cmp	r3, #40	; 0x28
 800062c:	d001      	beq.n	8000632 <lcd_config+0x1a>
		param != LCD_CFG_4BIT_2LINE_5X8)
		return LCD_EARG;
 800062e:	2301      	movs	r3, #1
 8000630:	e01c      	b.n	800066c <lcd_config+0x54>

	/* RS <= 1'b0 */
	lcd_command_mode();
 8000632:	f7ff ffd9 	bl	80005e8 <lcd_command_mode>

	/* change 8-bit interface to 4-bit interface */
	lcd_set_high(param);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff6d 	bl	8000518 <lcd_set_high>
	lcd_strobe();
 800063e:	f7ff ff55 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 8000642:	230a      	movs	r3, #10
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff3b 	bl	80004c0 <sys_delay>

	/* DB7 to DB4 of the "function set" instruction is written twice */
	lcd_strobe();
 800064a:	f7ff ff4f 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 800064e:	230a      	movs	r3, #10
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff35 	bl	80004c0 <sys_delay>

	/* 4-bit, two lines, 5x8 pixel */
	lcd_set_low(param);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff91 	bl	8000580 <lcd_set_low>
	lcd_strobe();
 800065e:	f7ff ff45 	bl	80004ec <lcd_strobe>
	sys_delay(LCDT_10MS);
 8000662:	230a      	movs	r3, #10
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff2b 	bl	80004c0 <sys_delay>

	return LCD_EOK;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <lcd_write>:

/* sends a given byte of data to lcd */
static void lcd_write(uint8_t data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]

	lcd_set_high(data);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff49 	bl	8000518 <lcd_set_high>
	lcd_strobe();
 8000686:	f7ff ff31 	bl	80004ec <lcd_strobe>
	lcd_set_low(data);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff77 	bl	8000580 <lcd_set_low>
	lcd_strobe();
 8000692:	f7ff ff2b 	bl	80004ec <lcd_strobe>

	sys_delay(LCDT_1MS);
 8000696:	2301      	movs	r3, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff11 	bl	80004c0 <sys_delay>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <lcd_set_mode>:

/* sets lcd display mode */
static enum LCD_ERR lcd_set_mode(const uint8_t mode)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
	if (mode != LCD_CFG_DEC_NOSHIFT ||
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d108      	bne.n	80006c8 <lcd_set_mode+0x22>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d105      	bne.n	80006c8 <lcd_set_mode+0x22>
		mode != LCD_CFG_DEC_SHIFT ||
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d102      	bne.n	80006c8 <lcd_set_mode+0x22>
		mode != LCD_CFG_INC_NOSHIFT ||
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d001      	beq.n	80006cc <lcd_set_mode+0x26>
		mode != LCD_CFG_INC_SHIFT)
		return LCD_EARG;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e01b      	b.n	8000704 <lcd_set_mode+0x5e>

	if (mode != LCD_CFG_DISPLAY1_BLINK1_CURSOR1 ||
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d10b      	bne.n	80006ea <lcd_set_mode+0x44>
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b0e      	cmp	r3, #14
 80006d6:	d108      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK0_CURSOR1 ||
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d105      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK1_CURSOR0 ||
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b0c      	cmp	r3, #12
 80006e2:	d102      	bne.n	80006ea <lcd_set_mode+0x44>
		mode != LCD_CFG_DISPLAY1_BLINK0_CURSOR0 ||
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d001      	beq.n	80006ee <lcd_set_mode+0x48>
		mode != LCD_CFG_DISPLAY0_BLINK0_CURSOR0)
		return LCD_EARG;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00a      	b.n	8000704 <lcd_set_mode+0x5e>

	/* RS <= 1'b0 */
	lcd_command_mode();
 80006ee:	f7ff ff7b 	bl	80005e8 <lcd_command_mode>
	lcd_write(mode);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ffbd 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 80006fa:	2301      	movs	r3, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fedf 	bl	80004c0 <sys_delay>

	return LCD_EOK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcd_cls>:

/* interface functions BEGIN */
void lcd_cls(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* RS <= 1'b0 */
	lcd_command_mode();
 8000710:	f7ff ff6a 	bl	80005e8 <lcd_command_mode>
	lcd_write(__LCD_CLS);
 8000714:	2301      	movs	r3, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffac 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 800071c:	2301      	movs	r3, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fece 	bl	80004c0 <sys_delay>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_ret>:

void lcd_ret(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/* RS <= 1'b0 */
	lcd_command_mode();
 800072c:	f7ff ff5c 	bl	80005e8 <lcd_command_mode>
	lcd_write(__LCD_RET);
 8000730:	2302      	movs	r3, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff9e 	bl	8000674 <lcd_write>

	sys_delay(LCDT_1MS);
 8000738:	2301      	movs	r3, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fec0 	bl	80004c0 <sys_delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <lcd_putch>:
	return LCD_EARG;
}

/* prints a given char at current cursor position */
void lcd_putch(const uint8_t byte)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	lcd_data_mode();
 800074e:	f7ff ff57 	bl	8000600 <lcd_data_mode>

	lcd_write(byte);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff8d 	bl	8000674 <lcd_write>
	lcd_write(LCDT_1MS);
 800075a:	2301      	movs	r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff88 	bl	8000674 <lcd_write>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_goto>:

/* moves cursor to given X: @addr, Y: @line coordinates */
enum LCD_ERR lcd_goto(const uint8_t line, const uint8_t addr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    uint8_t xpos = addr & 0x0F;
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	73fb      	strb	r3, [r7, #15]

    /* RS <= 1'b0 */
    lcd_command_mode();
 8000784:	f7ff ff30 	bl	80005e8 <lcd_command_mode>

	switch (line)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d018      	beq.n	80007c0 <lcd_goto+0x54>
 800078e:	2b05      	cmp	r3, #5
 8000790:	dc1f      	bgt.n	80007d2 <lcd_goto+0x66>
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <lcd_goto+0x30>
 8000796:	2b01      	cmp	r3, #1
 8000798:	d009      	beq.n	80007ae <lcd_goto+0x42>
 800079a:	e01a      	b.n	80007d2 <lcd_goto+0x66>
	{
	/* set DDRAM address. */
	case 0:
		lcd_write(0x80 | 0x00 | xpos);
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff65 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e012      	b.n	80007d4 <lcd_goto+0x68>
		break;
	case 1:
		lcd_write(0x80 | 0x40 | xpos);
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff5c 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007bc:	2300      	movs	r3, #0
 80007be:	e009      	b.n	80007d4 <lcd_goto+0x68>
		break;
	/* set CGRAM address. */
	case 5:
		lcd_write(0x40 | xpos);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff53 	bl	8000674 <lcd_write>
		return LCD_ECGRAM;
 80007ce:	2302      	movs	r3, #2
 80007d0:	e000      	b.n	80007d4 <lcd_goto+0x68>
		break;

	default:
		return LCD_EARG;
 80007d2:	2301      	movs	r3, #1
		break;
	}
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <lcd_scroll>:
	lcd_putch(' ');
	lcd_shift_curs(__LCD_CURS_L);
}

enum LCD_ERR lcd_scroll(uint8_t direction)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	/* RS <= 1'b0 */
	lcd_command_mode();
 80007e6:	f7ff feff 	bl	80005e8 <lcd_command_mode>

	/* shift whole display */
	if (direction ==__LCD_CURS_L) {			// '<'
 80007ea:	223c      	movs	r2, #60	; 0x3c
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d105      	bne.n	80007fe <lcd_scroll+0x22>
		lcd_write(__LCD_DSL);
 80007f2:	2318      	movs	r3, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff3d 	bl	8000674 <lcd_write>
		return LCD_EOK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e00a      	b.n	8000814 <lcd_scroll+0x38>
	} else if (direction ==__LCD_CURS_R) {	// '>'
 80007fe:	223e      	movs	r2, #62	; 0x3e
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4293      	cmp	r3, r2
 8000804:	d105      	bne.n	8000812 <lcd_scroll+0x36>
		lcd_write(__LCD_DSR);
 8000806:	231c      	movs	r3, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff33 	bl	8000674 <lcd_write>
		return LCD_EOK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <lcd_scroll+0x38>
	}
	return LCD_EARG;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <lcd_init>:

/* initializes lcd display */
enum LCD_ERR lcd_init(const uint8_t type, const uint8_t mode, const uint8_t shift)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	460b      	mov	r3, r1
 8000828:	71bb      	strb	r3, [r7, #6]
 800082a:	4613      	mov	r3, r2
 800082c:	717b      	strb	r3, [r7, #5]
	lcd_write(__LCD_FST);
 800082e:	2330      	movs	r3, #48	; 0x30
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff1f 	bl	8000674 <lcd_write>
	sys_delay(LCDT_10MS);
 8000836:	230a      	movs	r3, #10
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe41 	bl	80004c0 <sys_delay>
	lcd_write(__LCD_FST);
 800083e:	2330      	movs	r3, #48	; 0x30
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff17 	bl	8000674 <lcd_write>
	sys_delay(LCDT_10MS);
 8000846:	230a      	movs	r3, #10
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe39 	bl	80004c0 <sys_delay>

	lcd_config(type);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fee1 	bl	8000618 <lcd_config>

	lcd_set_mode(mode);
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff24 	bl	80006a6 <lcd_set_mode>

	lcd_set_mode(shift);
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff20 	bl	80006a6 <lcd_set_mode>

	lcd_cls();
 8000866:	f7ff ff51 	bl	800070c <lcd_cls>
	lcd_ret();
 800086a:	f7ff ff5d 	bl	8000728 <lcd_ret>

	/* this is required for some reason unknown */
	lcd_scroll('<');
 800086e:	203c      	movs	r0, #60	; 0x3c
 8000870:	f7ff ffb4 	bl	80007dc <lcd_scroll>

	return LCD_EOK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <sys_delay>:
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	uint32_t delay = HAL_GetTick() + ms;
 8000886:	f000 feef 	bl	8001668 <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
	while(HAL_GetTick() < delay);
 8000892:	bf00      	nop
 8000894:	f000 fee8 	bl	8001668 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4293      	cmp	r3, r2
 800089e:	d8f9      	bhi.n	8000894 <sys_delay+0x16>
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <clamp_ui32>:
static trigen *sysgen = NULL;
static term_win *systerm = NULL;

/* misc functions */
uint32_t clamp_ui32(uint32_t val, uint32_t min, uint32_t max)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b087      	sub	sp, #28
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
	const uint32_t ret = (val < min) ? min : val;
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	bf38      	it	cc
 80008be:	4613      	movcc	r3, r2
 80008c0:	617b      	str	r3, [r7, #20]
	return (ret > max) ? max : ret;
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4293      	cmp	r3, r2
 80008c8:	bf28      	it	cs
 80008ca:	4613      	movcs	r3, r2
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	371c      	adds	r7, #28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <__uint32_skip_zeroes>:

static const uint32_t UINT32_DIGITS = 10;
static const uint32_t STR2INT_BASE10 = 10;

static char *__uint32_skip_zeroes(char *buf)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char *msd = &buf[UINT32_DIGITS - 1];
 80008e0:	230a      	movs	r3, #10
 80008e2:	3b01      	subs	r3, #1
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]

	/* find the msd / skip leading zeroes */
	for (uint32_t i = 0; i < UINT32_DIGITS; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e00d      	b.n	800090c <__uint32_skip_zeroes+0x34>
		if (buf[i] != '0') {
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b30      	cmp	r3, #48	; 0x30
 80008fa:	d004      	beq.n	8000906 <__uint32_skip_zeroes+0x2e>
			msd = &buf[i];
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
			break;
 8000904:	e006      	b.n	8000914 <__uint32_skip_zeroes+0x3c>
	for (uint32_t i = 0; i < UINT32_DIGITS; i++)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3301      	adds	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	220a      	movs	r2, #10
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	4293      	cmp	r3, r2
 8000912:	d3ed      	bcc.n	80008f0 <__uint32_skip_zeroes+0x18>
		}

	return msd;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <uint32_to_str>:

char *uint32_to_str(uint32_t val, char *buf)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	/* transform each uint32 digit into char */
	for(uint32_t i = UINT32_DIGITS; i > 0; i--, val /= STR2INT_BASE10)
 800092e:	230a      	movs	r3, #10
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e015      	b.n	8000960 <uint32_to_str+0x3c>
		buf[i - 1] = "0123456789"[val % STR2INT_BASE10];
 8000934:	220a      	movs	r2, #10
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fbb3 f1f2 	udiv	r1, r3, r2
 800093c:	fb02 f201 	mul.w	r2, r2, r1
 8000940:	1a9a      	subs	r2, r3, r2
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3b01      	subs	r3, #1
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	440b      	add	r3, r1
 800094a:	490a      	ldr	r1, [pc, #40]	; (8000974 <uint32_to_str+0x50>)
 800094c:	5c8a      	ldrb	r2, [r1, r2]
 800094e:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = UINT32_DIGITS; i > 0; i--, val /= STR2INT_BASE10)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3b01      	subs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	220a      	movs	r2, #10
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	fbb3 f3f2 	udiv	r3, r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e6      	bne.n	8000934 <uint32_to_str+0x10>

	return buf;
 8000966:	683b      	ldr	r3, [r7, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	08003008 	.word	0x08003008

08000978 <uint32_to_zstr>:

char *uint32_to_zstr(uint32_t val, char *buf)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	/* transform a given value */
	buf = uint32_to_str(val, buf);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffcd 	bl	8000924 <uint32_to_str>
 800098a:	6038      	str	r0, [r7, #0]

	/* find the msd / skip leading zeroes */
	return __uint32_skip_zeroes(buf);
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f7ff ffa3 	bl	80008d8 <__uint32_skip_zeroes>
 8000992:	4603      	mov	r3, r0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_TIM_PeriodElapsedCallback>:
	while(tim2_ticks < delay);
}*/

/* main generator timer callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if (&htim2 == htim && NULL != sysgen)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d110      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x32>
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00c      	beq.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sysgen->count);
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009c0:	f000 ffe3 	bl	800198a <HAL_DAC_SetValue>
		gen_tick(sysgen);
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fda0 	bl	800150e <gen_tick>
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000060 	.word	0x20000060
 80009dc:	20000044 	.word	0x20000044
 80009e0:	2000004c 	.word	0x2000004c

080009e4 <HAL_GPIO_EXTI_Callback>:

/* control key interrupt callbacks */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop_IT(&htim2);
 80009ee:	4864      	ldr	r0, [pc, #400]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x19c>)
 80009f0:	f001 fee2 	bl	80027b8 <HAL_TIM_Base_Stop_IT>

	switch(GPIO_Pin)
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009fa:	d02e      	beq.n	8000a5a <HAL_GPIO_EXTI_Callback+0x76>
 80009fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a00:	dc37      	bgt.n	8000a72 <HAL_GPIO_EXTI_Callback+0x8e>
 8000a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a06:	d01d      	beq.n	8000a44 <HAL_GPIO_EXTI_Callback+0x60>
 8000a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a0c:	dc31      	bgt.n	8000a72 <HAL_GPIO_EXTI_Callback+0x8e>
 8000a0e:	2b40      	cmp	r3, #64	; 0x40
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4a>
 8000a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a16:	d12c      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x8e>
	{
	case GPIO_PIN_8:
		if (tick_step > TICK_STEP_MIN)	{ tick_step -= 1; }
 8000a18:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d929      	bls.n	8000a76 <HAL_GPIO_EXTI_Callback+0x92>
 8000a22:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a2a:	6013      	str	r3, [r2, #0]
		break;
 8000a2c:	e023      	b.n	8000a76 <HAL_GPIO_EXTI_Callback+0x92>

	case GPIO_PIN_6:
		if (tick_step < TICK_STEP_MAX)	{ tick_step += 1; }
 8000a2e:	4b55      	ldr	r3, [pc, #340]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2220      	movs	r2, #32
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d220      	bcs.n	8000a7a <HAL_GPIO_EXTI_Callback+0x96>
 8000a38:	4b52      	ldr	r3, [pc, #328]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a40:	6013      	str	r3, [r2, #0]
		break;
 8000a42:	e01a      	b.n	8000a7a <HAL_GPIO_EXTI_Callback+0x96>

	case GPIO_PIN_9:
		if (fine_step > FREQ_STEP_MIN)	{ fine_step /= 2; }
 8000a44:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d917      	bls.n	8000a7e <HAL_GPIO_EXTI_Callback+0x9a>
 8000a4e:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	085b      	lsrs	r3, r3, #1
 8000a54:	4a4c      	ldr	r2, [pc, #304]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a56:	6013      	str	r3, [r2, #0]
		break;
 8000a58:	e011      	b.n	8000a7e <HAL_GPIO_EXTI_Callback+0x9a>

	case GPIO_PIN_11:
		if (fine_step < FREQ_STEP_MAX)	{ fine_step *= 2; }
 8000a5a:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d20d      	bcs.n	8000a82 <HAL_GPIO_EXTI_Callback+0x9e>
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a6e:	6013      	str	r3, [r2, #0]
		break;
 8000a70:	e007      	b.n	8000a82 <HAL_GPIO_EXTI_Callback+0x9e>

	default:
		break;
 8000a72:	bf00      	nop
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_EXTI_Callback+0xa0>
		break;
 8000a76:	bf00      	nop
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_EXTI_Callback+0xa0>
		break;
 8000a7a:	bf00      	nop
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_EXTI_Callback+0xa0>
		break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_EXTI_Callback+0xa0>
		break;
 8000a82:	bf00      	nop
	};

	/* reconfigure main generator */
	fine_step = clamp_ui32(fine_step, FREQ_STEP_MIN, FREQ_STEP_MAX);
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff0b 	bl	80008aa <clamp_ui32>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a3c      	ldr	r2, [pc, #240]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a98:	6013      	str	r3, [r2, #0]
	tick_step = clamp_ui32(tick_step, TICK_STEP_MIN, TICK_STEP_MAX);
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff01 	bl	80008aa <clamp_ui32>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a36      	ldr	r2, [pc, #216]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000aac:	6013      	str	r3, [r2, #0]

	gen_set_step(sysgen, fine_step);
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fcf2 	bl	80014a2 <gen_set_step>
	gen_set_tick(sysgen, tick_step);
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fcdb 	bl	8001484 <gen_set_tick>

	term_cls(systerm);
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fb60 	bl	8001198 <term_cls>
	term_putslx(systerm, "Mul:", 0, 0);
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	492c      	ldr	r1, [pc, #176]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000ae2:	f000 fc19 	bl	8001318 <term_putslx>
	term_putslx(systerm, "Div:", 1, 0);
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	492a      	ldr	r1, [pc, #168]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000af0:	f000 fc12 	bl	8001318 <term_putslx>
	term_putslx(systerm, uint32_to_zstr(fine_step, str), 0, 4);
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000af6:	681c      	ldr	r4, [r3, #0]
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4927      	ldr	r1, [pc, #156]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff3a 	bl	8000978 <uint32_to_zstr>
 8000b04:	4601      	mov	r1, r0
 8000b06:	2304      	movs	r3, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f000 fc04 	bl	8001318 <term_putslx>
	term_putslx(systerm, uint32_to_zstr(tick_step + 1, str), 1, 4);
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b12:	681c      	ldr	r4, [r3, #0]
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4920      	ldr	r1, [pc, #128]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff2b 	bl	8000978 <uint32_to_zstr>
 8000b22:	4601      	mov	r1, r0
 8000b24:	2304      	movs	r3, #4
 8000b26:	2201      	movs	r2, #1
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f000 fbf5 	bl	8001318 <term_putslx>

	curr_freq = (base_freq * fine_step) / (tick_step + 1);
 8000b2e:	220c      	movs	r2, #12
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	fb03 f202 	mul.w	r2, r3, r2
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000b44:	6013      	str	r3, [r2, #0]
	term_putslx(systerm, "Freq:", 0, 8);
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b50:	f000 fbe2 	bl	8001318 <term_putslx>
	term_putslx(systerm, uint32_to_zstr(curr_freq, str), 1, 8);
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	490f      	ldr	r1, [pc, #60]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff0a 	bl	8000978 <uint32_to_zstr>
 8000b64:	4601      	mov	r1, r0
 8000b66:	2308      	movs	r3, #8
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f000 fbd4 	bl	8001318 <term_putslx>

	HAL_TIM_Base_Start_IT(&htim2);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000b72:	f001 fdb1 	bl	80026d8 <HAL_TIM_Base_Start_IT>
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000060 	.word	0x20000060
 8000b84:	20000040 	.word	0x20000040
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000044 	.word	0x20000044
 8000b90:	20000048 	.word	0x20000048
 8000b94:	08003014 	.word	0x08003014
 8000b98:	0800301c 	.word	0x0800301c
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004
 8000ba4:	08003024 	.word	0x08003024

08000ba8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	trigen __gen_main;
	sysgen = &__gen_main;
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <main+0x90>)
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	6013      	str	r3, [r2, #0]

	term_win __term_main;
	systerm = &__term_main;
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <main+0x94>)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	6013      	str	r3, [r2, #0]

	uint32_t start_step = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t start_tick = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40

	fine_step = start_step;
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0x98>)
 8000bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bc8:	6013      	str	r3, [r2, #0]
	tick_step = start_tick;
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <main+0x9c>)
 8000bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bce:	6013      	str	r3, [r2, #0]

	//if (GEN_EARG == gen_init(sysgen, GEN_12BIT, start_step, start_tick))
	//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);

	gen_init(sysgen, GEN_12BIT, start_step, start_tick);
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <main+0x90>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bd8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000bdc:	f000 fc02 	bl	80013e4 <gen_init>
	gen_set_step(sysgen, start_step);
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <main+0x90>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fc5b 	bl	80014a2 <gen_set_step>
	gen_set_tick(sysgen, start_tick);
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <main+0x90>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fc46 	bl	8001484 <gen_set_tick>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bf8:	f000 fcd0 	bl	800159c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bfc:	f000 f828 	bl	8000c50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c00:	f000 f904 	bl	8000e0c <MX_GPIO_Init>
	MX_DAC_Init();
 8000c04:	f000 f88c 	bl	8000d20 <MX_DAC_Init>
	MX_TIM2_Init();
 8000c08:	f000 f8b4 	bl	8000d74 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	term_init(systerm);
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <main+0x94>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fbae 	bl	8001372 <term_init>
	sys_delay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f7ff fe31 	bl	800087e <sys_delay>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <main+0xa0>)
 8000c20:	f000 fe61 	bl	80018e6 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <main+0xa4>)
 8000c26:	f001 fd57 	bl	80026d8 <HAL_TIM_Base_Start_IT>
		/* USER CODE BEGIN 3 */
		//HAL_TIM_Base_Stop_IT(&htim2);

		//term_putsl(systerm, uint32_to_str(fine_step, str), 0);
		//term_putsl(systerm, uint32_to_str(tick_step, str), 1);
		term_draw(systerm);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <main+0x94>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 faca 	bl	80011c8 <term_draw>
 8000c34:	e7f9      	b.n	8000c2a <main+0x82>
 8000c36:	bf00      	nop
 8000c38:	20000044 	.word	0x20000044
 8000c3c:	20000048 	.word	0x20000048
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000040 	.word	0x20000040
 8000c48:	2000004c 	.word	0x2000004c
 8000c4c:	20000060 	.word	0x20000060

08000c50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 f9be 	bl	8002fe0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <SystemClock_Config+0xc8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <SystemClock_Config+0xcc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 f89b 	bl	8001e10 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000ce0:	f000 f92c 	bl	8000f3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fafd 	bl	8002300 <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000d0c:	f000 f916 	bl	8000f3c <Error_Handler>
	}
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_DAC_Init+0x4c>)
 8000d30:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MX_DAC_Init+0x50>)
 8000d32:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_DAC_Init+0x4c>)
 8000d36:	f000 fdb4 	bl	80018a2 <HAL_DAC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8000d40:	f000 f8fc 	bl	8000f3c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_DAC_Init+0x4c>)
 8000d54:	f000 fe3e 	bl	80019d4 <HAL_DAC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8000d5e:	f000 f8ed 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000004c 	.word	0x2000004c
 8000d70:	40007400 	.word	0x40007400

08000d74 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d96:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 800;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000da6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000daa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000dba:	f001 fc3d 	bl	8002638 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000dc4:	f000 f8ba 	bl	8000f3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000dd6:	f001 fe26 	bl	8002a26 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000de0:	f000 f8ac 	bl	8000f3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000de4:	2310      	movs	r3, #16
 8000de6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_TIM2_Init+0x94>)
 8000df2:	f002 f841 	bl	8002e78 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000dfc:	f000 f89e 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000060 	.word	0x20000060

08000e0c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCDRS_PIN_Pin|LCDRW_PIN_Pin|LCDEN_PIN_Pin|LCDD4_PIN_Pin
 8000e92:	2200      	movs	r2, #0
 8000e94:	f64f 4180 	movw	r1, #64640	; 0xfc80
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000e9a:	f000 ff87 	bl	8001dac <HAL_GPIO_WritePin>
			|LCDD5_PIN_Pin|LCDD6_PIN_Pin|LCDD7_PIN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000ea6:	f000 ff81 	bl	8001dac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCDRS_PIN_Pin LCDRW_PIN_Pin LCDEN_PIN_Pin LCDD4_PIN_Pin
                           LCDD5_PIN_Pin LCDD6_PIN_Pin LCDD7_PIN_Pin */
	GPIO_InitStruct.Pin = LCDRS_PIN_Pin|LCDRW_PIN_Pin|LCDEN_PIN_Pin|LCDD4_PIN_Pin
 8000eaa:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000eae:	617b      	str	r3, [r7, #20]
			|LCDD5_PIN_Pin|LCDD6_PIN_Pin|LCDD7_PIN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000ec4:	f000 fdd6 	bl	8001a74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ecc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000ee2:	f000 fdc7 	bl	8001a74 <HAL_GPIO_Init>

	/*Configure GPIO pins : TICK_DEC_Pin TICK_INC_Pin STEP_DEC_Pin STEP_INC_Pin */
	GPIO_InitStruct.Pin = TICK_DEC_Pin|TICK_INC_Pin|STEP_DEC_Pin|STEP_INC_Pin;
 8000ee6:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000eea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <MX_GPIO_Init+0x12c>)
 8000efe:	f000 fdb9 	bl	8001a74 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2101      	movs	r1, #1
 8000f06:	2017      	movs	r0, #23
 8000f08:	f000 fc95 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f0c:	2017      	movs	r0, #23
 8000f0e:	f000 fcae 	bl	800186e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2101      	movs	r1, #1
 8000f16:	2028      	movs	r0, #40	; 0x28
 8000f18:	f000 fc8d 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f000 fca6 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40020800 	.word	0x40020800

08000f3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	; (8001014 <HAL_DAC_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d127      	bne.n	800100a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_DAC_MspInit+0x80>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_DAC_MspInit+0x84>)
 8001006:	f000 fd35 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40007400 	.word	0x40007400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001030:	d115      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2105      	movs	r1, #5
 8001052:	201c      	movs	r0, #28
 8001054:	f000 fbef 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001058:	201c      	movs	r0, #28
 800105a:	f000 fc08 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 fac2 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80010c4:	2040      	movs	r0, #64	; 0x40
 80010c6:	f000 fe8b 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80010ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010ce:	f000 fe87 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80010d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d6:	f000 fe83 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM2_IRQHandler+0x10>)
 80010e6:	f001 fb96 	bl	8002816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000060 	.word	0x20000060

080010f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80010f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010fc:	f000 fe70 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <term_request_update>:
#include <string.h>
#include <stdbool.h>

/* not used anywhere, but we can use this in conjuntion with @term_draw to force a redraw */
void term_request_update(term_win *term)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	term->flags.update_req = true;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <term_reject_update>:

void term_reject_update(term_win *term)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	term->flags.update_req = false;
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001158:	f36f 0300 	bfc	r3, #0, #1
 800115c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <term_goto>:

/* sets cursor xpos to @x, ypos to @y */
void term_goto(term_win *term, const uint8_t x, const uint8_t y)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
 8001178:	4613      	mov	r3, r2
 800117a:	70bb      	strb	r3, [r7, #2]
	term->cursor_x = x;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	78fa      	ldrb	r2, [r7, #3]
 8001180:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	term->cursor_y = y;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	78ba      	ldrb	r2, [r7, #2]
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <term_cls>:

/* clears terminal primary buffer */
void term_cls(term_win *term)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	term_goto(term, 0, 0);    //return home
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffe1 	bl	800116c <term_goto>

	memset(term->win, ' ', term->size);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2120      	movs	r1, #32
 80011b6:	f001 ff13 	bl	8002fe0 <memset>

	term_request_update(term);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb4 	bl	8001128 <term_request_update>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <term_draw>:
this function is somewhat fast and sometimes lcd display can't keep up with it
so it actually redraws the screen only if @updateRequest flag of @std_win is set
if you need to actively redraw lcd screen every tick use @term_req_upd before calling this
 */
void term_draw(term_win *term)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (term->flags.update_req) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d02d      	beq.n	800123c <term_draw+0x74>

		term_reject_update(term);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffb2 	bl	800114a <term_reject_update>

		for (uint8_t i = 0; i < term->rows; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e021      	b.n	8001230 <term_draw+0x68>
			for (uint8_t j = 0; j < term->cols; j++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	73bb      	strb	r3, [r7, #14]
 80011f0:	e015      	b.n	800121e <term_draw+0x56>
				lcd_goto(i, j);
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fab7 	bl	800076c <lcd_goto>
				lcd_putch(term->win[i * term->cols + j]);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8001206:	fb02 f203 	mul.w	r2, r2, r3
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	4413      	add	r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa96 	bl	8000744 <lcd_putch>
			for (uint8_t j = 0; j < term->cols; j++) {
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	3301      	adds	r3, #1
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001224:	7bba      	ldrb	r2, [r7, #14]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3e3      	bcc.n	80011f2 <term_draw+0x2a>
		for (uint8_t i = 0; i < term->rows; i++) {
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	3301      	adds	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3d7      	bcc.n	80011ec <term_draw+0x24>
			}
		}
	}
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <term_putch>:
	}
}

/* prints a @ch at current cursor position and advances cursor once */
void term_putch(term_win *term, const char ch)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	uint8_t x = term->cursor_x;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001256:	73fb      	strb	r3, [r7, #15]
	uint8_t y = term->cursor_y;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800125e:	73bb      	strb	r3, [r7, #14]

	term->flags.h_overflow = false;
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001266:	f36f 03c3 	bfc	r3, #3, #1
 800126a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.v_overflow = false;
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001274:	f36f 1304 	bfc	r3, #4, #1
 8001278:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	if (ch != '\n')
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d00a      	beq.n	8001298 <term_putch+0x54>
		term->win[y * term->cols + x] = ch;
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800128a:	fb02 f203 	mul.w	r2, r2, r3
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	4413      	add	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	78f9      	ldrb	r1, [r7, #3]
 8001296:	54d1      	strb	r1, [r2, r3]

	term_request_update(term);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff45 	bl	8001128 <term_request_update>

	term->cursor_x++;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	/* line overflow */
	if (term->cursor_x > term->cols - 1 || ch == '\n') {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d902      	bls.n	80012c4 <term_putch+0x80>
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	2b0a      	cmp	r3, #10
 80012c2:	d112      	bne.n	80012ea <term_putch+0xa6>
		term->cursor_x = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		term->cursor_y++;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		term->flags.h_overflow = true;
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	}

	/* vertical overflow */
	if (term->cursor_y > term->rows)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d90a      	bls.n	8001310 <term_putch+0xcc>
	{
		term->cursor_y = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		term->flags.v_overflow = true;
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	}
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <term_putslx>:
		str++;
	}
}

void term_putslx(term_win *term, const char *str, const uint8_t line, const uint8_t x)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	460b      	mov	r3, r1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	4613      	mov	r3, r2
 800132c:	71bb      	strb	r3, [r7, #6]
	term_goto(term, x, line);
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4619      	mov	r1, r3
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff ff19 	bl	800116c <term_goto>

	while (*str != '\0') {
 800133a:	e010      	b.n	800135e <term_putslx+0x46>
		term_putch(term, *str);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff ff7e 	bl	8001244 <term_putch>

		if (term->flags.h_overflow)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <term_putslx+0x50>
			break;

		str++;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
	while (*str != '\0') {
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ea      	bne.n	800133c <term_putslx+0x24>
	}
}
 8001366:	e000      	b.n	800136a <term_putslx+0x52>
			break;
 8001368:	bf00      	nop
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <term_init>:

/* initializes std_win terminal */
void term_init(term_win *term)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	lcd_init(LCD_CFG_4BIT_2LINE_5X8,
 800137a:	2206      	movs	r2, #6
 800137c:	210c      	movs	r1, #12
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f7ff fa4c 	bl	800081c <lcd_init>
			 LCD_CFG_DISPLAY1_BLINK0_CURSOR0,
			 LCD_CFG_INC_NOSHIFT
			);      // initialize lcd display

	term->cursor_x = 0;   // set default cursor position
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	term->cursor_y = 0;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	term->size = TERM_2L_SIZE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2220      	movs	r2, #32
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
	term->rows = 2;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	term->cols = 16;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2210      	movs	r2, #16
 80013a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	term->flags.blink = false;   // force first update
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013b2:	f36f 0341 	bfc	r3, #1, #1
 80013b6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.cursor = false;     // not implemented yet
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013c0:	f36f 0382 	bfc	r3, #2, #1
 80013c4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	term->flags.update_req = true;
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	term_cls(term);     //flush the screen buffer
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fede 	bl	8001198 <term_cls>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <gen_init>:
enum GEN_ERR gen_set_tick(trigen *generator, uint32_t tick);
enum GEN_ERR gen_set_step(trigen *generator, uint32_t step);

/* initializer */
enum GEN_ERR gen_init(trigen *generator, uint32_t amp_max, uint32_t step, uint32_t tick)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
	generator->count = 0;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
	generator->tick = 0;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]

	if (GEN_EOK != gen_set_amp(generator, amp_max)) {
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 f81c 	bl	800143e <gen_set_amp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <gen_init+0x2c>
		return GEN_EARG;
 800140c:	2301      	movs	r3, #1
 800140e:	e012      	b.n	8001436 <gen_init+0x52>
	}

	if (GEN_EOK != gen_set_step(generator, step)) {
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f845 	bl	80014a2 <gen_set_step>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <gen_init+0x3e>
		return GEN_EARG;
 800141e:	2301      	movs	r3, #1
 8001420:	e009      	b.n	8001436 <gen_init+0x52>
	}

	if (GEN_EOK != gen_set_tick(generator, tick)) {
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f82d 	bl	8001484 <gen_set_tick>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <gen_init+0x50>
		return GEN_EARG;
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <gen_init+0x52>
	}

	return GEN_EOK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <gen_set_amp>:

/* set methods */
enum GEN_ERR gen_set_amp(trigen *generator, uint32_t amplitude)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
	switch(amplitude)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d005      	beq.n	800145a <gen_set_amp+0x1c>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001454:	4293      	cmp	r3, r2
 8001456:	d005      	beq.n	8001464 <gen_set_amp+0x26>
 8001458:	e00a      	b.n	8001470 <gen_set_amp+0x32>
	{
		case GEN_8BIT:
			generator->count_overflow = GEN_8BIT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	605a      	str	r2, [r3, #4]
			return GEN_EOK;
 8001460:	2300      	movs	r3, #0
 8001462:	e009      	b.n	8001478 <gen_set_amp+0x3a>
			break;

		case GEN_12BIT:
			generator->count_overflow = GEN_12BIT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f640 72ff 	movw	r2, #4095	; 0xfff
 800146a:	605a      	str	r2, [r3, #4]
			return GEN_EOK;
 800146c:	2300      	movs	r3, #0
 800146e:	e003      	b.n	8001478 <gen_set_amp+0x3a>
			break;

		default:
			generator->count_overflow = 1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	605a      	str	r2, [r3, #4]
			return GEN_EARG;
 8001476:	2301      	movs	r3, #1
			break;
	};

	return GEN_EARG;
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <gen_set_tick>:

enum GEN_ERR gen_set_tick(trigen *generator, uint32_t tick)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	generator->tick_overflow = tick;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	60da      	str	r2, [r3, #12]
	return GEN_EOK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <gen_set_step>:

enum GEN_ERR gen_set_step(trigen *generator, uint32_t step)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
	if (step != 0 && step < CHIP_MAXFREQ_HZ) {
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <gen_set_step+0x24>
 80014b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d204      	bcs.n	80014c6 <gen_set_step+0x24>
		generator->step = step;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
		return GEN_EOK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <gen_set_step+0x26>
	} else {
		return GEN_EARG;
 80014c6:	2301      	movs	r3, #1
	}
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <gen_count>:

/* generation helper function */
enum GEN_ERR gen_count(trigen *generator)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	generator->count += generator->step;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	441a      	add	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]

	if (generator->count > generator->count_overflow) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d904      	bls.n	8001500 <gen_count+0x2c>
		generator->count = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
		return GEN_EOVF;
 80014fc:	2302      	movs	r3, #2
 80014fe:	e000      	b.n	8001502 <gen_count+0x2e>
	}

	return GEN_EOK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <gen_tick>:

/* main generation function */
enum GEN_ERR gen_tick(trigen *generator)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	generator->tick++;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]

	if (generator->tick > generator->tick_overflow) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d907      	bls.n	800153c <gen_tick+0x2e>
		gen_count(generator);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffd1 	bl	80014d4 <gen_count>
		generator->tick = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
		return GEN_EOVF;
 8001538:	2302      	movs	r3, #2
 800153a:	e000      	b.n	800153e <gen_tick+0x30>
	}

	return GEN_EOK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001572:	f7ff fdc7 	bl	8001104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f001 fd0f 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff fb15 	bl	8000ba8 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800158c:	0800304c 	.word	0x0800304c
  ldr r2, =_sbss
 8001590:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001594:	200000ac 	.word	0x200000ac

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f92b 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fcba 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f943 	bl	800188a <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800161c:	f000 f90b 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000018 	.word	0x20000018
 8001638:	20000020 	.word	0x20000020
 800163c:	2000001c 	.word	0x2000001c

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000020 	.word	0x20000020
 8001664:	200000a8 	.word	0x200000a8

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200000a8 	.word	0x200000a8

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e014      	b.n	80018de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d105      	bne.n	80018ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fb67 	bl	8000f98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	795b      	ldrb	r3, [r3, #5]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_DAC_Start+0x16>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e040      	b.n	800197e <HAL_DAC_Start+0x98>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2201      	movs	r2, #1
 8001916:	409a      	lsls	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001930:	2b3c      	cmp	r3, #60	; 0x3c
 8001932:	d11d      	bne.n	8001970 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	e014      	b.n	8001970 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	213c      	movs	r1, #60	; 0x3c
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0202 	orr.w	r2, r2, #2
 800196e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	3308      	adds	r3, #8
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e004      	b.n	80019be <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	3314      	adds	r3, #20
 80019bc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	461a      	mov	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	795b      	ldrb	r3, [r3, #5]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_DAC_ConfigChannel+0x18>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e03c      	b.n	8001a66 <HAL_DAC_ConfigChannel+0x92>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2202      	movs	r2, #2
 80019f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4013      	ands	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	22c0      	movs	r2, #192	; 0xc0
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e16b      	b.n	8001d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 815a 	bne.w	8001d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d017      	beq.n	8001b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80b4 	beq.w	8001d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x314>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x226>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_GPIO_Init+0x318>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x222>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x21e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x320>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4e      	ldr	r2, [pc, #312]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x216>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x328>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x212>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x32c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x20a>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e00e      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c7e:	2308      	movs	r3, #8
 8001c80:	e00c      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00a      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e008      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e004      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cde:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d08:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f67f ae90 	bls.w	8001a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40013800 	.word	0x40013800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40021400 	.word	0x40021400
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fdf0 	bl	80009e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e264      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b99      	ldr	r3, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e23f      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a90      	ldr	r2, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a8a      	ldr	r2, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a87      	ldr	r2, [pc, #540]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a83      	ldr	r2, [pc, #524]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a80      	ldr	r2, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fbce 	bl	8001668 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fbca 	bl	8001668 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e204      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fbba 	bl	8001668 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fbb6 	bl	8001668 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f0      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c4      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4952      	ldr	r1, [pc, #328]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb6f 	bl	8001668 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fb6b 	bl	8001668 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a5      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4940      	ldr	r1, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x2b0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fb4e 	bl	8001668 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fb4a 	bl	8001668 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e184      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d030      	beq.n	800205c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fb2e 	bl	8001668 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fb2a 	bl	8001668 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e164      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e015      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x2b4>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fb17 	bl	8001668 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fb13 	bl	8001668 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e14d      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a0 	beq.w	80021aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d121      	bne.n	80020ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_RCC_OscConfig+0x2b8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fad9 	bl	8001668 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e011      	b.n	80020de <HAL_RCC_OscConfig+0x2ce>
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470000 	.word	0x42470000
 80020c4:	42470e80 	.word	0x42470e80
 80020c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7ff facc 	bl	8001668 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e106      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x4e4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x2f0>
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002108:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x32a>
 8002122:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a74      	ldr	r2, [pc, #464]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fa91 	bl	8001668 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7ff fa8d 	bl	8001668 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0c5      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x33a>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fa7b 	bl	8001668 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff fa77 	bl	8001668 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0af      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 809b 	beq.w	80022ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d05c      	beq.n	800227a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d141      	bne.n	800224c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fa4b 	bl	8001668 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff fa47 	bl	8001668 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e081      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221e:	4b37      	ldr	r3, [pc, #220]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fa20 	bl	8001668 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff fa1c 	bl	8001668 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e056      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x41c>
 800224a:	e04e      	b.n	80022ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fa09 	bl	8001668 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fa05 	bl	8001668 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03f      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x44a>
 8002278:	e037      	b.n	80022ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e032      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d028      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d121      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d11a      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b6:	4013      	ands	r3, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022be:	4293      	cmp	r3, r2
 80022c0:	d111      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40007000 	.word	0x40007000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470060 	.word	0x42470060

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff f93a 	bl	8001668 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff f936 	bl	8001668 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f89a 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	0800302c 	.word	0x0800302c
 80024c4:	20000018 	.word	0x20000018
 80024c8:	2000001c 	.word	0x2000001c

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d2:	2100      	movs	r1, #0
 80024d4:	6079      	str	r1, [r7, #4]
 80024d6:	2100      	movs	r1, #0
 80024d8:	60f9      	str	r1, [r7, #12]
 80024da:	2100      	movs	r1, #0
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024de:	2100      	movs	r1, #0
 80024e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e2:	4952      	ldr	r1, [pc, #328]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 80024e4:	6889      	ldr	r1, [r1, #8]
 80024e6:	f001 010c 	and.w	r1, r1, #12
 80024ea:	2908      	cmp	r1, #8
 80024ec:	d00d      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x3e>
 80024ee:	2908      	cmp	r1, #8
 80024f0:	f200 8094 	bhi.w	800261c <HAL_RCC_GetSysClockFreq+0x150>
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d002      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x32>
 80024f8:	2904      	cmp	r1, #4
 80024fa:	d003      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x38>
 80024fc:	e08e      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_GetSysClockFreq+0x164>)
 8002500:	60bb      	str	r3, [r7, #8]
       break;
 8002502:	e08e      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCC_GetSysClockFreq+0x168>)
 8002506:	60bb      	str	r3, [r7, #8]
      break;
 8002508:	e08b      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250a:	4948      	ldr	r1, [pc, #288]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 800250c:	6849      	ldr	r1, [r1, #4]
 800250e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002512:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002514:	4945      	ldr	r1, [pc, #276]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 8002516:	6849      	ldr	r1, [r1, #4]
 8002518:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800251c:	2900      	cmp	r1, #0
 800251e:	d024      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002520:	4942      	ldr	r1, [pc, #264]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 8002522:	6849      	ldr	r1, [r1, #4]
 8002524:	0989      	lsrs	r1, r1, #6
 8002526:	4608      	mov	r0, r1
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002530:	f04f 0500 	mov.w	r5, #0
 8002534:	ea00 0204 	and.w	r2, r0, r4
 8002538:	ea01 0305 	and.w	r3, r1, r5
 800253c:	493d      	ldr	r1, [pc, #244]	; (8002634 <HAL_RCC_GetSysClockFreq+0x168>)
 800253e:	fb01 f003 	mul.w	r0, r1, r3
 8002542:	2100      	movs	r1, #0
 8002544:	fb01 f102 	mul.w	r1, r1, r2
 8002548:	1844      	adds	r4, r0, r1
 800254a:	493a      	ldr	r1, [pc, #232]	; (8002634 <HAL_RCC_GetSysClockFreq+0x168>)
 800254c:	fba2 0101 	umull	r0, r1, r2, r1
 8002550:	1863      	adds	r3, r4, r1
 8002552:	4619      	mov	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f7fd fe34 	bl	80001c8 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e04a      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	461a      	mov	r2, r3
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	ea02 0400 	and.w	r4, r2, r0
 8002582:	ea03 0501 	and.w	r5, r3, r1
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	014b      	lsls	r3, r1, #5
 8002594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002598:	0142      	lsls	r2, r0, #5
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	1b00      	subs	r0, r0, r4
 80025a0:	eb61 0105 	sbc.w	r1, r1, r5
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	018b      	lsls	r3, r1, #6
 80025ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025b2:	0182      	lsls	r2, r0, #6
 80025b4:	1a12      	subs	r2, r2, r0
 80025b6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	00d9      	lsls	r1, r3, #3
 80025c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025c8:	00d0      	lsls	r0, r2, #3
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	1912      	adds	r2, r2, r4
 80025d0:	eb45 0303 	adc.w	r3, r5, r3
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	0299      	lsls	r1, r3, #10
 80025de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025e2:	0290      	lsls	r0, r2, #10
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f7fd fde8 	bl	80001c8 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_RCC_GetSysClockFreq+0x160>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	3301      	adds	r3, #1
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	60bb      	str	r3, [r7, #8]
      break;
 800261a:	e002      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <HAL_RCC_GetSysClockFreq+0x164>)
 800261e:	60bb      	str	r3, [r7, #8]
      break;
 8002620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002622:	68bb      	ldr	r3, [r7, #8]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400
 8002634:	017d7840 	.word	0x017d7840

08002638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e041      	b.n	80026ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fcde 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 fac4 	bl	8002c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e04e      	b.n	800278e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_TIM_Base_Start_IT+0xc4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d01d      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x80>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d010      	beq.n	800278c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	e007      	b.n	800278c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40010000 	.word	0x40010000
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40010400 	.word	0x40010400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40001800 	.word	0x40001800

080027b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a1a      	ldr	r2, [r3, #32]
 80027d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10f      	bne.n	8002800 <HAL_TIM_Base_Stop_IT+0x48>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	f240 4344 	movw	r3, #1092	; 0x444
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_Base_Stop_IT+0x48>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d122      	bne.n	8002872 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11b      	bne.n	8002872 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f06f 0202 	mvn.w	r2, #2
 8002842:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9b5 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 800285e:	e005      	b.n	800286c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f9a7 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9b8 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d122      	bne.n	80028c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d11b      	bne.n	80028c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f06f 0204 	mvn.w	r2, #4
 8002896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f98b 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 80028b2:	e005      	b.n	80028c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f97d 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f98e 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d122      	bne.n	800291a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11b      	bne.n	800291a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f06f 0208 	mvn.w	r2, #8
 80028ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2204      	movs	r2, #4
 80028f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f961 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002906:	e005      	b.n	8002914 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f953 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f964 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b10      	cmp	r3, #16
 8002926:	d122      	bne.n	800296e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b10      	cmp	r3, #16
 8002934:	d11b      	bne.n	800296e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0210 	mvn.w	r2, #16
 800293e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2208      	movs	r2, #8
 8002944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f937 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 800295a:	e005      	b.n	8002968 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f929 	bl	8002bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f93a 	bl	8002bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10e      	bne.n	800299a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0201 	mvn.w	r2, #1
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe f801 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d10e      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d107      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fadf 	bl	8002f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d10e      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d107      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8ff 	bl	8002bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d10e      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0220 	mvn.w	r2, #32
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 faa9 	bl	8002f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_ConfigClockSource+0x1c>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0b4      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x186>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7a:	d03e      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0xd4>
 8002a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a80:	f200 8087 	bhi.w	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	f000 8086 	beq.w	8002b98 <HAL_TIM_ConfigClockSource+0x172>
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a90:	d87f      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002a92:	2b70      	cmp	r3, #112	; 0x70
 8002a94:	d01a      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0xa6>
 8002a96:	2b70      	cmp	r3, #112	; 0x70
 8002a98:	d87b      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9a:	2b60      	cmp	r3, #96	; 0x60
 8002a9c:	d050      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0x11a>
 8002a9e:	2b60      	cmp	r3, #96	; 0x60
 8002aa0:	d877      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa2:	2b50      	cmp	r3, #80	; 0x50
 8002aa4:	d03c      	beq.n	8002b20 <HAL_TIM_ConfigClockSource+0xfa>
 8002aa6:	2b50      	cmp	r3, #80	; 0x50
 8002aa8:	d873      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d058      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x13a>
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d86f      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab2:	2b30      	cmp	r3, #48	; 0x30
 8002ab4:	d064      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab6:	2b30      	cmp	r3, #48	; 0x30
 8002ab8:	d86b      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d060      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x15a>
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d867      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d05c      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d05a      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x15a>
 8002aca:	e062      	b.n	8002b92 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f000 f9ac 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]
      break;
 8002af8:	e04f      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f000 f995 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1c:	609a      	str	r2, [r3, #8]
      break;
 8002b1e:	e03c      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f000 f909 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2150      	movs	r1, #80	; 0x50
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f962 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 8002b3e:	e02c      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f000 f928 	bl	8002da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2160      	movs	r1, #96	; 0x60
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f952 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 8002b5e:	e01c      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f000 f8e9 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f942 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 8002b7e:	e00c      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 f939 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 8002b90:	e003      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      break;
 8002b96:	e000      	b.n	8002b9a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <TIM_Base_SetConfig+0x114>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d00f      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3d      	ldr	r2, [pc, #244]	; (8002d1c <TIM_Base_SetConfig+0x118>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <TIM_Base_SetConfig+0x11c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <TIM_Base_SetConfig+0x120>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <TIM_Base_SetConfig+0x124>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <TIM_Base_SetConfig+0x114>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d027      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <TIM_Base_SetConfig+0x118>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d023      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <TIM_Base_SetConfig+0x11c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <TIM_Base_SetConfig+0x120>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <TIM_Base_SetConfig+0x124>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d017      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <TIM_Base_SetConfig+0x128>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <TIM_Base_SetConfig+0x12c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00f      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <TIM_Base_SetConfig+0x130>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <TIM_Base_SetConfig+0x134>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <TIM_Base_SetConfig+0x138>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <TIM_Base_SetConfig+0x13c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <TIM_Base_SetConfig+0x114>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0xf8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <TIM_Base_SetConfig+0x124>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	615a      	str	r2, [r3, #20]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40000c00 	.word	0x40000c00
 8002d28:	40010400 	.word	0x40010400
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800
 8002d38:	40001800 	.word	0x40001800
 8002d3c:	40001c00 	.word	0x40001c00
 8002d40:	40002000 	.word	0x40002000

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 030a 	bic.w	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0210 	bic.w	r2, r3, #16
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	031b      	lsls	r3, r3, #12
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f043 0307 	orr.w	r3, r3, #7
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e05a      	b.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d01d      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40001800 	.word	0x40001800

08002f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	; (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	; (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	; (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	; (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 f820 	bl	8002ff0 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003044 	.word	0x08003044
 8002fd4:	08003044 	.word	0x08003044
 8002fd8:	08003044 	.word	0x08003044
 8002fdc:	08003048 	.word	0x08003048

08002fe0 <memset>:
 8002fe0:	4402      	add	r2, r0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
